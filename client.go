// Package outline provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package outline

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	HttpScopes = "http.Scopes"
)

// Defines values for CollectionSortDirection.
const (
	Asc  CollectionSortDirection = "asc"
	Desc CollectionSortDirection = "desc"
)

// Defines values for FileOperationState.
const (
	FileOperationStateComplete  FileOperationState = "complete"
	FileOperationStateCreating  FileOperationState = "creating"
	FileOperationStateError     FileOperationState = "error"
	FileOperationStateExpired   FileOperationState = "expired"
	FileOperationStateUploading FileOperationState = "uploading"
)

// Defines values for FileOperationType.
const (
	FileOperationTypeExport FileOperationType = "export"
	FileOperationTypeImport FileOperationType = "import"
)

// Defines values for Permission.
const (
	Read      Permission = "read"
	ReadWrite Permission = "read_write"
)

// Defines values for SortingDirection.
const (
	SortingDirectionASC  SortingDirection = "ASC"
	SortingDirectionDESC SortingDirection = "DESC"
)

// Defines values for UserRole.
const (
	Admin  UserRole = "admin"
	Guest  UserRole = "guest"
	Member UserRole = "member"
	Viewer UserRole = "viewer"
)

// Defines values for PostCollectionsExportJSONBodyFormat.
const (
	PostCollectionsExportJSONBodyFormatHtml            PostCollectionsExportJSONBodyFormat = "html"
	PostCollectionsExportJSONBodyFormatJson            PostCollectionsExportJSONBodyFormat = "json"
	PostCollectionsExportJSONBodyFormatOutlineMarkdown PostCollectionsExportJSONBodyFormat = "outline-markdown"
)

// Defines values for PostCollectionsExportAllJSONBodyFormat.
const (
	PostCollectionsExportAllJSONBodyFormatHtml            PostCollectionsExportAllJSONBodyFormat = "html"
	PostCollectionsExportAllJSONBodyFormatJson            PostCollectionsExportAllJSONBodyFormat = "json"
	PostCollectionsExportAllJSONBodyFormatOutlineMarkdown PostCollectionsExportAllJSONBodyFormat = "outline-markdown"
)

// Defines values for PostCommentsListJSONBodyDirection.
const (
	PostCommentsListJSONBodyDirectionASC  PostCommentsListJSONBodyDirection = "ASC"
	PostCommentsListJSONBodyDirectionDESC PostCommentsListJSONBodyDirection = "DESC"
)

// Defines values for PostDocumentsDraftsJSONBodyDateFilter.
const (
	PostDocumentsDraftsJSONBodyDateFilterDay   PostDocumentsDraftsJSONBodyDateFilter = "day"
	PostDocumentsDraftsJSONBodyDateFilterMonth PostDocumentsDraftsJSONBodyDateFilter = "month"
	PostDocumentsDraftsJSONBodyDateFilterWeek  PostDocumentsDraftsJSONBodyDateFilter = "week"
	PostDocumentsDraftsJSONBodyDateFilterYear  PostDocumentsDraftsJSONBodyDateFilter = "year"
)

// Defines values for PostDocumentsDraftsJSONBodyDirection.
const (
	PostDocumentsDraftsJSONBodyDirectionASC  PostDocumentsDraftsJSONBodyDirection = "ASC"
	PostDocumentsDraftsJSONBodyDirectionDESC PostDocumentsDraftsJSONBodyDirection = "DESC"
)

// Defines values for PostDocumentsListJSONBodyDirection.
const (
	PostDocumentsListJSONBodyDirectionASC  PostDocumentsListJSONBodyDirection = "ASC"
	PostDocumentsListJSONBodyDirectionDESC PostDocumentsListJSONBodyDirection = "DESC"
)

// Defines values for PostDocumentsSearchJSONBodyDateFilter.
const (
	PostDocumentsSearchJSONBodyDateFilterDay   PostDocumentsSearchJSONBodyDateFilter = "day"
	PostDocumentsSearchJSONBodyDateFilterMonth PostDocumentsSearchJSONBodyDateFilter = "month"
	PostDocumentsSearchJSONBodyDateFilterWeek  PostDocumentsSearchJSONBodyDateFilter = "week"
	PostDocumentsSearchJSONBodyDateFilterYear  PostDocumentsSearchJSONBodyDateFilter = "year"
)

// Defines values for PostDocumentsSearchJSONBodyStatusFilter.
const (
	Archived  PostDocumentsSearchJSONBodyStatusFilter = "archived"
	Draft     PostDocumentsSearchJSONBodyStatusFilter = "draft"
	Published PostDocumentsSearchJSONBodyStatusFilter = "published"
)

// Defines values for PostDocumentsViewedJSONBodyDirection.
const (
	PostDocumentsViewedJSONBodyDirectionASC  PostDocumentsViewedJSONBodyDirection = "ASC"
	PostDocumentsViewedJSONBodyDirectionDESC PostDocumentsViewedJSONBodyDirection = "DESC"
)

// Defines values for PostEventsListJSONBodyDirection.
const (
	PostEventsListJSONBodyDirectionASC  PostEventsListJSONBodyDirection = "ASC"
	PostEventsListJSONBodyDirectionDESC PostEventsListJSONBodyDirection = "DESC"
)

// Defines values for PostFileOperationsListJSONBodyDirection.
const (
	PostFileOperationsListJSONBodyDirectionASC  PostFileOperationsListJSONBodyDirection = "ASC"
	PostFileOperationsListJSONBodyDirectionDESC PostFileOperationsListJSONBodyDirection = "DESC"
)

// Defines values for PostFileOperationsListJSONBodyType.
const (
	PostFileOperationsListJSONBodyTypeExport PostFileOperationsListJSONBodyType = "export"
	PostFileOperationsListJSONBodyTypeImport PostFileOperationsListJSONBodyType = "import"
)

// Defines values for PostGroupsListJSONBodyDirection.
const (
	PostGroupsListJSONBodyDirectionASC  PostGroupsListJSONBodyDirection = "ASC"
	PostGroupsListJSONBodyDirectionDESC PostGroupsListJSONBodyDirection = "DESC"
)

// Defines values for PostRevisionsListJSONBodyDirection.
const (
	PostRevisionsListJSONBodyDirectionASC  PostRevisionsListJSONBodyDirection = "ASC"
	PostRevisionsListJSONBodyDirectionDESC PostRevisionsListJSONBodyDirection = "DESC"
)

// Defines values for PostSharesListJSONBodyDirection.
const (
	PostSharesListJSONBodyDirectionASC  PostSharesListJSONBodyDirection = "ASC"
	PostSharesListJSONBodyDirectionDESC PostSharesListJSONBodyDirection = "DESC"
)

// Defines values for PostUsersListJSONBodyDirection.
const (
	ASC  PostUsersListJSONBodyDirection = "ASC"
	DESC PostUsersListJSONBodyDirection = "DESC"
)

// Defines values for PostUsersListJSONBodyFilter.
const (
	Active    PostUsersListJSONBodyFilter = "active"
	All       PostUsersListJSONBodyFilter = "all"
	Invited   PostUsersListJSONBodyFilter = "invited"
	Suspended PostUsersListJSONBodyFilter = "suspended"
)

// Attachment defines model for Attachment.
type Attachment struct {
	ContentType *string `json:"contentType,omitempty"`

	// DocumentId Identifier for the associated document, if any.
	DocumentId *openapi_types.UUID `json:"documentId,omitempty"`
	Name       *string             `json:"name,omitempty"`
	Size       *float32            `json:"size,omitempty"`
	Url        *string             `json:"url,omitempty"`
}

// Auth defines model for Auth.
type Auth struct {
	Team *Team `json:"team,omitempty"`
	User *User `json:"user,omitempty"`
}

// Collection defines model for Collection.
type Collection struct {
	// Color A color representing the collection, this is used to help make collections more identifiable in the UI. It should be in HEX format including the #
	Color *string `json:"color,omitempty"`

	// CreatedAt The date and time that this object was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt The date and time that this object was deleted
	DeletedAt *time.Time `json:"deletedAt"`

	// Description A description of the collection, may contain markdown formatting
	Description *string `json:"description,omitempty"`

	// Icon A string that represents an icon in the outline-icons package
	Icon *string `json:"icon,omitempty"`

	// Id Unique identifier for the object.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Index The position of the collection in the sidebar
	Index *string `json:"index,omitempty"`

	// Name The name of the collection.
	Name       *string     `json:"name,omitempty"`
	Permission *Permission `json:"permission,omitempty"`

	// Sort The sort of documents in the collection. Note that not all API responses respect this and it is left as a frontend concern to implement.
	Sort *struct {
		Direction *CollectionSortDirection `json:"direction,omitempty"`
		Field     *string                  `json:"field,omitempty"`
	} `json:"sort,omitempty"`

	// UpdatedAt The date and time that this object was last changed
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// CollectionSortDirection defines model for Collection.Sort.Direction.
type CollectionSortDirection string

// CollectionGroupMembership defines model for CollectionGroupMembership.
type CollectionGroupMembership struct {
	// CollectionId Identifier for the associated collection.
	CollectionId *openapi_types.UUID `json:"collectionId,omitempty"`

	// GroupId Identifier for the associated group.
	GroupId *openapi_types.UUID `json:"groupId,omitempty"`

	// Id Unique identifier for the object.
	Id         *string     `json:"id,omitempty"`
	Permission *Permission `json:"permission,omitempty"`
}

// Comment defines model for Comment.
type Comment struct {
	// CreatedAt The date and time that this object was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	CreatedBy *User      `json:"createdBy,omitempty"`

	// Data The editor data representing this comment.
	Data *map[string]interface{} `json:"data,omitempty"`

	// DocumentId Identifier for the document this is related to.
	DocumentId *openapi_types.UUID `json:"documentId,omitempty"`

	// Id Unique identifier for the object.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// ParentCommentId Identifier for the comment this is a child of, if any.
	ParentCommentId *openapi_types.UUID `json:"parentCommentId,omitempty"`

	// UpdatedAt The date and time that this object was last changed
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	UpdatedBy *User      `json:"updatedBy,omitempty"`
}

// Document defines model for Document.
type Document struct {
	// ArchivedAt The date and time that this object was archived
	ArchivedAt    *time.Time `json:"archivedAt,omitempty"`
	Collaborators *[]User    `json:"collaborators,omitempty"`

	// CollectionId Identifier for the associated collection.
	CollectionId *openapi_types.UUID `json:"collectionId,omitempty"`

	// CreatedAt The date and time that this object was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	CreatedBy *User      `json:"createdBy,omitempty"`

	// DeletedAt The date and time that this object was deleted
	DeletedAt *time.Time `json:"deletedAt"`

	// Emoji An emoji associated with the document.
	Emoji *string `json:"emoji,omitempty"`

	// FullWidth Whether this document should be displayed in a full-width view.
	FullWidth *bool `json:"fullWidth,omitempty"`

	// Id Unique identifier for the object.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// ParentDocumentId Identifier for the document this is a child of, if any.
	ParentDocumentId *openapi_types.UUID `json:"parentDocumentId,omitempty"`

	// Pinned Whether this document is pinned in the collection
	Pinned *bool `json:"pinned,omitempty"`

	// PublishedAt The date and time that this object was published
	PublishedAt *time.Time `json:"publishedAt"`

	// Revision A number that is auto incrementing with every revision of the document that is saved
	Revision *float32 `json:"revision,omitempty"`

	// Template Whether this document is a template
	Template *bool `json:"template,omitempty"`

	// TemplateId Unique identifier for the template this document was created from, if any
	TemplateId *openapi_types.UUID `json:"templateId,omitempty"`

	// Text The text content of the document, contains markdown formatting
	Text *string `json:"text,omitempty"`

	// Title The title of the document.
	Title *string `json:"title,omitempty"`

	// UpdatedAt The date and time that this object was last changed
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	UpdatedBy *User      `json:"updatedBy,omitempty"`

	// UrlId A short unique ID that can be used to identify the document as an alternative to the UUID
	UrlId *string `json:"urlId,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error *string `json:"error,omitempty"`
	Ok    *bool   `json:"ok,omitempty"`
}

// Event defines model for Event.
type Event struct {
	Actor *User `json:"actor,omitempty"`

	// ActorId The user that performed the action.
	ActorId *openapi_types.UUID `json:"actorId,omitempty"`

	// ActorIpAddress The ip address the action was performed from. This field is only returned when the `auditLog` boolean is true.
	ActorIpAddress *string `json:"actorIpAddress,omitempty"`

	// CollectionId Identifier for the associated collection, if any
	CollectionId *openapi_types.UUID `json:"collectionId,omitempty"`

	// CreatedAt The date and time that this event was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Data Additional unstructured data associated with the event
	Data *map[string]interface{} `json:"data,omitempty"`

	// DocumentId Identifier for the associated document, if any
	DocumentId *openapi_types.UUID `json:"documentId,omitempty"`

	// Id Unique identifier for the object.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// ModelId Identifier for the object this event is associated with when it is not one of document, collection, or user.
	ModelId *openapi_types.UUID `json:"modelId,omitempty"`
	Name    *string             `json:"name,omitempty"`
}

// FileOperation defines model for FileOperation.
type FileOperation struct {
	Collections *Collection `json:"collections,omitempty"`

	// CreatedAt The date and time that this object was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Id Unique identifier for the object.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Size The size of the resulting file in bytes
	Size *float32 `json:"size,omitempty"`

	// State The state of the file operation.
	State *FileOperationState `json:"state,omitempty"`

	// Type The type of file operation.
	Type *FileOperationType `json:"type,omitempty"`
	User *User              `json:"user,omitempty"`
}

// FileOperationState The state of the file operation.
type FileOperationState string

// FileOperationType The type of file operation.
type FileOperationType string

// Group defines model for Group.
type Group struct {
	// CreatedAt The date and time that this object was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Id Unique identifier for the object.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// MemberCount The number of users that are members of the group
	MemberCount *float32 `json:"memberCount,omitempty"`

	// Name The name of this group.
	Name *string `json:"name,omitempty"`

	// UpdatedAt The date and time that this object was last changed
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// GroupMembership defines model for GroupMembership.
type GroupMembership struct {
	// GroupId Identifier for the associated group.
	GroupId *openapi_types.UUID `json:"groupId,omitempty"`

	// Id Unique identifier for the object.
	Id   *string `json:"id,omitempty"`
	User *User   `json:"user,omitempty"`

	// UserId Identifier for the associated user.
	UserId *openapi_types.UUID `json:"userId,omitempty"`
}

// Invite defines model for Invite.
type Invite struct {
	// Email The email address to invite
	Email *string `json:"email,omitempty"`

	// Name The full name of the user being invited
	Name *string   `json:"name,omitempty"`
	Role *UserRole `json:"role,omitempty"`
}

// Membership defines model for Membership.
type Membership struct {
	// CollectionId Identifier for the associated collection.
	CollectionId *openapi_types.UUID `json:"collectionId,omitempty"`

	// Id Unique identifier for the object.
	Id         *string     `json:"id,omitempty"`
	Permission *Permission `json:"permission,omitempty"`

	// UserId Identifier for the associated user.
	UserId *openapi_types.UUID `json:"userId,omitempty"`
}

// NavigationNode defines model for NavigationNode.
type NavigationNode struct {
	Children *[]NavigationNode `json:"children,omitempty"`

	// Id Unique identifier for the document.
	Id    *openapi_types.UUID `json:"id,omitempty"`
	Title *string             `json:"title,omitempty"`
	Url   *string             `json:"url,omitempty"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	Limit  *float32 `json:"limit,omitempty"`
	Offset *float32 `json:"offset,omitempty"`
}

// Permission defines model for Permission.
type Permission string

// Policy defines model for Policy.
type Policy struct {
	Abilities *struct {
		Archive             *bool `json:"archive,omitempty"`
		Create              *bool `json:"create,omitempty"`
		CreateChildDocument *bool `json:"createChildDocument,omitempty"`
		Delete              *bool `json:"delete,omitempty"`
		Download            *bool `json:"download,omitempty"`
		Move                *bool `json:"move,omitempty"`
		Pin                 *bool `json:"pin,omitempty"`
		Read                *bool `json:"read,omitempty"`
		Restore             *bool `json:"restore,omitempty"`
		Share               *bool `json:"share,omitempty"`
		Star                *bool `json:"star,omitempty"`
		Unarchive           *bool `json:"unarchive,omitempty"`
		Unpin               *bool `json:"unpin,omitempty"`
		Unstar              *bool `json:"unstar,omitempty"`
		Update              *bool `json:"update,omitempty"`
	} `json:"abilities,omitempty"`

	// Id Unique identifier for the object this policy references.
	Id *openapi_types.UUID `json:"id,omitempty"`
}

// Revision defines model for Revision.
type Revision struct {
	// CreatedAt Date and time when this revision was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	CreatedBy *User      `json:"createdBy,omitempty"`

	// DocumentId Identifier for the associated document.
	DocumentId *openapi_types.UUID `json:"documentId,omitempty"`

	// Id Unique identifier for the object.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Text Body of the document, may contain markdown formatting
	Text *string `json:"text,omitempty"`

	// Title Title of the document.
	Title *string `json:"title,omitempty"`
}

// Share defines model for Share.
type Share struct {
	// CreatedAt Date and time when this share was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	CreatedBy *User      `json:"createdBy,omitempty"`

	// DocumentTitle Title of the shared document.
	DocumentTitle *string `json:"documentTitle,omitempty"`

	// DocumentUrl URL of the original document.
	DocumentUrl *string `json:"documentUrl,omitempty"`

	// Id Unique identifier for the object.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// IncludeChildDocuments If to also give permission to view documents nested beneath this one.
	IncludeChildDocuments *bool `json:"includeChildDocuments,omitempty"`

	// LastAccessedAt Date and time when this share was last viewed
	LastAccessedAt *time.Time `json:"lastAccessedAt,omitempty"`

	// Published If true the share can be loaded without a user account.
	Published *bool `json:"published,omitempty"`

	// UpdatedAt Date and time when this share was edited
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// Url URL of the publicly shared document.
	Url *string `json:"url,omitempty"`
}

// Sorting defines model for Sorting.
type Sorting struct {
	Direction *SortingDirection `json:"direction,omitempty"`
	Sort      *string           `json:"sort,omitempty"`
}

// SortingDirection defines model for Sorting.Direction.
type SortingDirection string

// Team defines model for Team.
type Team struct {
	AllowedDomains *[]string `json:"allowedDomains,omitempty"`

	// AvatarUrl The URL for the image associated with this team, it will be displayed in the team switcher and in the top left of the knowledge base along with the name.
	AvatarUrl *string `json:"avatarUrl,omitempty"`

	// CollaborativeEditing Whether this team has collaborative editing in documents globally enabled.
	CollaborativeEditing *bool `json:"collaborativeEditing,omitempty"`

	// DefaultCollectionId If set then the referenced collection is where users will be redirected to after signing in instead of the Home screen
	DefaultCollectionId *openapi_types.UUID `json:"defaultCollectionId,omitempty"`
	DefaultUserRole     *UserRole           `json:"defaultUserRole,omitempty"`

	// DocumentEmbeds Whether this team has embeds in documents globally enabled. It can be disabled to reduce potential data leakage to third parties.
	DocumentEmbeds *bool `json:"documentEmbeds,omitempty"`

	// GuestSignin Whether this team has guest signin enabled. Guests can signin with an email address and are not required to have a Google Workspace/Slack SSO account once invited.
	GuestSignin *bool `json:"guestSignin,omitempty"`

	// Id Unique identifier for the object.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// InviteRequired Whether an invite is required to join this team, if false users may join with a linked SSO provider.
	InviteRequired *bool `json:"inviteRequired,omitempty"`

	// MemberCollectionCreate Whether members are allowed to create new collections. If false then only admins can create collections.
	MemberCollectionCreate *bool `json:"memberCollectionCreate,omitempty"`

	// Name The name of this team, it is usually auto-generated when the first SSO connection is made but can be changed if neccessary.
	Name *string `json:"name,omitempty"`

	// Sharing Whether this team has share links globally enabled. If this value is false then all sharing UI and APIs are disabled.
	Sharing *bool `json:"sharing,omitempty"`

	// Subdomain Represents the subdomain at which this team's knowledge base can be accessed.
	Subdomain *string `json:"subdomain,omitempty"`

	// Url The fully qualified URL at which this team's knowledge base can be accessed.
	Url *string `json:"url,omitempty"`
}

// User defines model for User.
type User struct {
	// AvatarUrl The URL for the image associated with this user, it will be displayed in the application UI and email notifications.
	AvatarUrl *string `json:"avatarUrl,omitempty"`

	// CreatedAt The date and time that this user first signed in or was invited as a guest.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Email The email associated with this user, it is migrated from Slack or Google Workspace when the SSO connection is made but can be changed if neccessary.
	Email *openapi_types.Email `json:"email,omitempty"`

	// Id Unique identifier for the object.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// IsSuspended Whether this user has been suspended.
	IsSuspended *bool `json:"isSuspended,omitempty"`

	// LastActiveAt The last time this user made an API request, this value is updated at most every 5 minutes.
	LastActiveAt *time.Time `json:"lastActiveAt,omitempty"`

	// Name The name of this user, it is migrated from Slack or Google Workspace when the SSO connection is made but can be changed if neccessary.
	Name *string   `json:"name,omitempty"`
	Role *UserRole `json:"role,omitempty"`
}

// UserRole defines model for UserRole.
type UserRole string

// View defines model for View.
type View struct {
	// Count The number of times the user has viewed the document.
	Count *float32 `json:"count,omitempty"`

	// DocumentId Identifier for the associated document.
	DocumentId *openapi_types.UUID `json:"documentId,omitempty"`

	// FirstViewedAt When the document was first viewed by the user
	FirstViewedAt *time.Time `json:"firstViewedAt,omitempty"`

	// Id Unique identifier for the object.
	Id *string `json:"id,omitempty"`

	// LastViewedAt When the document was last viewed by the user
	LastViewedAt *time.Time `json:"lastViewedAt,omitempty"`
	User         *User      `json:"user,omitempty"`
}

// NotFound defines model for NotFound.
type NotFound = Error

// Unauthenticated defines model for Unauthenticated.
type Unauthenticated = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// Validation defines model for Validation.
type Validation = Error

// PostAttachmentsCreateJSONBody defines parameters for PostAttachmentsCreate.
type PostAttachmentsCreateJSONBody struct {
	ContentType string `json:"contentType"`

	// DocumentId Identifier for the associated document, if any.
	DocumentId *openapi_types.UUID `json:"documentId,omitempty"`
	Name       string              `json:"name"`

	// Size Size of the file attachment in bytes.
	Size float32 `json:"size"`
}

// PostAttachmentsDeleteJSONBody defines parameters for PostAttachmentsDelete.
type PostAttachmentsDeleteJSONBody struct {
	// Id Unique identifier for the attachment.
	Id openapi_types.UUID `json:"id"`
}

// PostAttachmentsRedirectJSONBody defines parameters for PostAttachmentsRedirect.
type PostAttachmentsRedirectJSONBody struct {
	// Id Unique identifier for the attachment.
	Id openapi_types.UUID `json:"id"`
}

// PostCollectionsAddGroupJSONBody defines parameters for PostCollectionsAddGroup.
type PostCollectionsAddGroupJSONBody struct {
	GroupId    openapi_types.UUID `json:"groupId"`
	Id         openapi_types.UUID `json:"id"`
	Permission *Permission        `json:"permission,omitempty"`
}

// PostCollectionsAddUserJSONBody defines parameters for PostCollectionsAddUser.
type PostCollectionsAddUserJSONBody struct {
	Id         openapi_types.UUID `json:"id"`
	Permission *Permission        `json:"permission,omitempty"`
	UserId     openapi_types.UUID `json:"userId"`
}

// PostCollectionsCreateJSONBody defines parameters for PostCollectionsCreate.
type PostCollectionsCreateJSONBody struct {
	Color       *string     `json:"color,omitempty"`
	Description *string     `json:"description,omitempty"`
	Name        string      `json:"name"`
	Permission  *Permission `json:"permission,omitempty"`
	Private     *bool       `json:"private,omitempty"`
}

// PostCollectionsDeleteJSONBody defines parameters for PostCollectionsDelete.
type PostCollectionsDeleteJSONBody struct {
	Id openapi_types.UUID `json:"id"`
}

// PostCollectionsDocumentsJSONBody defines parameters for PostCollectionsDocuments.
type PostCollectionsDocumentsJSONBody struct {
	// Id Unique identifier for the collection.
	Id openapi_types.UUID `json:"id"`
}

// PostCollectionsExportJSONBody defines parameters for PostCollectionsExport.
type PostCollectionsExportJSONBody struct {
	Format *PostCollectionsExportJSONBodyFormat `json:"format,omitempty"`
	Id     openapi_types.UUID                   `json:"id"`
}

// PostCollectionsExportJSONBodyFormat defines parameters for PostCollectionsExport.
type PostCollectionsExportJSONBodyFormat string

// PostCollectionsExportAllJSONBody defines parameters for PostCollectionsExportAll.
type PostCollectionsExportAllJSONBody struct {
	Format *PostCollectionsExportAllJSONBodyFormat `json:"format,omitempty"`
}

// PostCollectionsExportAllJSONBodyFormat defines parameters for PostCollectionsExportAll.
type PostCollectionsExportAllJSONBodyFormat string

// PostCollectionsGroupMembershipsJSONBody defines parameters for PostCollectionsGroupMemberships.
type PostCollectionsGroupMembershipsJSONBody struct {
	// Id Identifier for the collection
	Id         openapi_types.UUID `json:"id"`
	Limit      *float32           `json:"limit,omitempty"`
	Offset     *float32           `json:"offset,omitempty"`
	Permission *Permission        `json:"permission,omitempty"`

	// Query Filter memberships by group names
	Query *string `json:"query,omitempty"`
}

// PostCollectionsInfoJSONBody defines parameters for PostCollectionsInfo.
type PostCollectionsInfoJSONBody struct {
	// Id Unique identifier for the collection.
	Id openapi_types.UUID `json:"id"`
}

// PostCollectionsMembershipsJSONBody defines parameters for PostCollectionsMemberships.
type PostCollectionsMembershipsJSONBody struct {
	// Id Identifier for the collection
	Id         openapi_types.UUID `json:"id"`
	Limit      *float32           `json:"limit,omitempty"`
	Offset     *float32           `json:"offset,omitempty"`
	Permission *Permission        `json:"permission,omitempty"`

	// Query Filter memberships by user names
	Query *string `json:"query,omitempty"`
}

// PostCollectionsRemoveGroupJSONBody defines parameters for PostCollectionsRemoveGroup.
type PostCollectionsRemoveGroupJSONBody struct {
	GroupId openapi_types.UUID `json:"groupId"`

	// Id Identifier for the collection
	Id openapi_types.UUID `json:"id"`
}

// PostCollectionsRemoveUserJSONBody defines parameters for PostCollectionsRemoveUser.
type PostCollectionsRemoveUserJSONBody struct {
	// Id Identifier for the collection
	Id     openapi_types.UUID `json:"id"`
	UserId openapi_types.UUID `json:"userId"`
}

// PostCollectionsUpdateJSONBody defines parameters for PostCollectionsUpdate.
type PostCollectionsUpdateJSONBody struct {
	Color       *string            `json:"color,omitempty"`
	Description *string            `json:"description,omitempty"`
	Id          openapi_types.UUID `json:"id"`
	Name        *string            `json:"name,omitempty"`
	Permission  *Permission        `json:"permission,omitempty"`
}

// PostCommentsCreateJSONBody defines parameters for PostCommentsCreate.
type PostCommentsCreateJSONBody struct {
	Data            map[string]interface{} `json:"data"`
	DocumentId      openapi_types.UUID     `json:"documentId"`
	Id              *openapi_types.UUID    `json:"id,omitempty"`
	ParentCommentId *openapi_types.UUID    `json:"parentCommentId,omitempty"`
}

// PostCommentsDeleteJSONBody defines parameters for PostCommentsDelete.
type PostCommentsDeleteJSONBody struct {
	Id openapi_types.UUID `json:"id"`
}

// PostCommentsListJSONBody defines parameters for PostCommentsList.
type PostCommentsListJSONBody struct {
	// CollectionId Filter to a specific collection
	CollectionId *openapi_types.UUID                `json:"collectionId,omitempty"`
	Direction    *PostCommentsListJSONBodyDirection `json:"direction,omitempty"`

	// DocumentId Filter to a specific document
	DocumentId *openapi_types.UUID `json:"documentId,omitempty"`
	Limit      *float32            `json:"limit,omitempty"`
	Offset     *float32            `json:"offset,omitempty"`
	Sort       *string             `json:"sort,omitempty"`
}

// PostCommentsListJSONBodyDirection defines parameters for PostCommentsList.
type PostCommentsListJSONBodyDirection string

// PostCommentsUpdateJSONBody defines parameters for PostCommentsUpdate.
type PostCommentsUpdateJSONBody struct {
	Data map[string]interface{} `json:"data"`
	Id   openapi_types.UUID     `json:"id"`
}

// PostDocumentsAddUserJSONBody defines parameters for PostDocumentsAddUser.
type PostDocumentsAddUserJSONBody struct {
	// Id Unique identifier for the document. Either the UUID or the urlId is acceptable.
	Id         string             `json:"id"`
	Permission *Permission        `json:"permission,omitempty"`
	UserId     openapi_types.UUID `json:"userId"`
}

// PostDocumentsArchiveJSONBody defines parameters for PostDocumentsArchive.
type PostDocumentsArchiveJSONBody struct {
	// Id Unique identifier for the document. Either the UUID or the urlId is acceptable.
	Id string `json:"id"`
}

// PostDocumentsCreateJSONBody defines parameters for PostDocumentsCreate.
type PostDocumentsCreateJSONBody struct {
	CollectionId     openapi_types.UUID  `json:"collectionId"`
	ParentDocumentId *openapi_types.UUID `json:"parentDocumentId,omitempty"`

	// Publish Whether this document should be immediately published and made visible to other team members.
	Publish *bool `json:"publish,omitempty"`

	// Template Whether this document should be considered to be a template.
	Template   *bool               `json:"template,omitempty"`
	TemplateId *openapi_types.UUID `json:"templateId,omitempty"`

	// Text The body of the document, may contain markdown formatting.
	Text  *string `json:"text,omitempty"`
	Title string  `json:"title"`
}

// PostDocumentsDeleteJSONBody defines parameters for PostDocumentsDelete.
type PostDocumentsDeleteJSONBody struct {
	// Id Unique identifier for the document. Either the UUID or the urlId is acceptable.
	Id string `json:"id"`

	// Permanent If set to true the document will be destroyed with no way to recover rather than moved to the trash.
	Permanent *bool `json:"permanent,omitempty"`
}

// PostDocumentsDraftsJSONBody defines parameters for PostDocumentsDrafts.
type PostDocumentsDraftsJSONBody struct {
	// CollectionId A collection to search within
	CollectionId *openapi_types.UUID `json:"collectionId,omitempty"`

	// DateFilter Any documents that have not been updated within the specified period will be filtered out
	DateFilter *PostDocumentsDraftsJSONBodyDateFilter `json:"dateFilter,omitempty"`
	Direction  *PostDocumentsDraftsJSONBodyDirection  `json:"direction,omitempty"`
	Limit      *float32                               `json:"limit,omitempty"`
	Offset     *float32                               `json:"offset,omitempty"`
	Sort       *string                                `json:"sort,omitempty"`
}

// PostDocumentsDraftsJSONBodyDateFilter defines parameters for PostDocumentsDrafts.
type PostDocumentsDraftsJSONBodyDateFilter string

// PostDocumentsDraftsJSONBodyDirection defines parameters for PostDocumentsDrafts.
type PostDocumentsDraftsJSONBodyDirection string

// PostDocumentsExportJSONBody defines parameters for PostDocumentsExport.
type PostDocumentsExportJSONBody struct {
	// Id Unique identifier for the document. Either the UUID or the urlId is acceptable.
	Id *string `json:"id,omitempty"`
}

// PostDocumentsImportMultipartBody defines parameters for PostDocumentsImport.
type PostDocumentsImportMultipartBody struct {
	CollectionId *openapi_types.UUID `json:"collectionId,omitempty"`

	// File Only plain text, markdown, docx, and html format are supported.
	File             *map[string]interface{} `json:"file,omitempty"`
	ParentDocumentId *openapi_types.UUID     `json:"parentDocumentId,omitempty"`
	Publish          *bool                   `json:"publish,omitempty"`
	Template         *bool                   `json:"template,omitempty"`
}

// PostDocumentsInfoJSONBody defines parameters for PostDocumentsInfo.
type PostDocumentsInfoJSONBody struct {
	// Id Unique identifier for the document. Either the UUID or the urlId is acceptable.
	Id *string `json:"id,omitempty"`

	// ShareId Unique identifier for a document share, a shareId may be used in place of a document UUID
	ShareId *openapi_types.UUID `json:"shareId,omitempty"`
}

// PostDocumentsListJSONBody defines parameters for PostDocumentsList.
type PostDocumentsListJSONBody struct {
	BacklinkDocumentId *openapi_types.UUID `json:"backlinkDocumentId,omitempty"`

	// CollectionId Optionally filter to a specific collection
	CollectionId     *openapi_types.UUID                 `json:"collectionId,omitempty"`
	Direction        *PostDocumentsListJSONBodyDirection `json:"direction,omitempty"`
	Limit            *float32                            `json:"limit,omitempty"`
	Offset           *float32                            `json:"offset,omitempty"`
	ParentDocumentId *openapi_types.UUID                 `json:"parentDocumentId,omitempty"`
	Sort             *string                             `json:"sort,omitempty"`

	// Template Optionally filter to only templates
	Template *bool               `json:"template,omitempty"`
	UserId   *openapi_types.UUID `json:"userId,omitempty"`
}

// PostDocumentsListJSONBodyDirection defines parameters for PostDocumentsList.
type PostDocumentsListJSONBodyDirection string

// PostDocumentsMembershipsJSONBody defines parameters for PostDocumentsMemberships.
type PostDocumentsMembershipsJSONBody struct {
	// Id Unique identifier for the document. Either the UUID or the urlId is acceptable.
	Id string `json:"id"`

	// Query If set, will filter the results by user name
	Query *string `json:"query,omitempty"`
}

// PostDocumentsMoveJSONBody defines parameters for PostDocumentsMove.
type PostDocumentsMoveJSONBody struct {
	CollectionId *openapi_types.UUID `json:"collectionId,omitempty"`

	// Id Unique identifier for the document. Either the UUID or the urlId is acceptable.
	Id               string              `json:"id"`
	ParentDocumentId *openapi_types.UUID `json:"parentDocumentId,omitempty"`
}

// PostDocumentsRemoveUserJSONBody defines parameters for PostDocumentsRemoveUser.
type PostDocumentsRemoveUserJSONBody struct {
	// Id Unique identifier for the document. Either the UUID or the urlId is acceptable.
	Id     string             `json:"id"`
	UserId openapi_types.UUID `json:"userId"`
}

// PostDocumentsRestoreJSONBody defines parameters for PostDocumentsRestore.
type PostDocumentsRestoreJSONBody struct {
	// Id Unique identifier for the document. Either the UUID or the urlId is acceptable.
	Id string `json:"id"`

	// RevisionId Identifier for the revision to restore to.
	RevisionId *openapi_types.UUID `json:"revisionId,omitempty"`
}

// PostDocumentsSearchJSONBody defines parameters for PostDocumentsSearch.
type PostDocumentsSearchJSONBody struct {
	// CollectionId A collection to search within
	CollectionId *openapi_types.UUID `json:"collectionId,omitempty"`

	// DateFilter Any documents that have not been updated within the specified period will be filtered out
	DateFilter *PostDocumentsSearchJSONBodyDateFilter `json:"dateFilter,omitempty"`

	// DocumentId A document to search within
	DocumentId *openapi_types.UUID `json:"documentId,omitempty"`
	Limit      *float32            `json:"limit,omitempty"`
	Offset     *float32            `json:"offset,omitempty"`
	Query      *string             `json:"query,omitempty"`

	// StatusFilter Any documents that are not in the specified status will be filtered out
	StatusFilter *PostDocumentsSearchJSONBodyStatusFilter `json:"statusFilter,omitempty"`

	// UserId Any documents that have not been edited by the user identifier will be filtered out
	UserId *openapi_types.UUID `json:"userId,omitempty"`
}

// PostDocumentsSearchJSONBodyDateFilter defines parameters for PostDocumentsSearch.
type PostDocumentsSearchJSONBodyDateFilter string

// PostDocumentsSearchJSONBodyStatusFilter defines parameters for PostDocumentsSearch.
type PostDocumentsSearchJSONBodyStatusFilter string

// PostDocumentsStarJSONBody defines parameters for PostDocumentsStar.
type PostDocumentsStarJSONBody struct {
	// Id Unique identifier for the document. Either the UUID or the urlId is acceptable.
	Id string `json:"id"`
}

// PostDocumentsTemplatizeJSONBody defines parameters for PostDocumentsTemplatize.
type PostDocumentsTemplatizeJSONBody struct {
	Id openapi_types.UUID `json:"id"`
}

// PostDocumentsUnpublishJSONBody defines parameters for PostDocumentsUnpublish.
type PostDocumentsUnpublishJSONBody struct {
	// Id Unique identifier for the document. Either the UUID or the urlId is acceptable.
	Id string `json:"id"`
}

// PostDocumentsUnstarJSONBody defines parameters for PostDocumentsUnstar.
type PostDocumentsUnstarJSONBody struct {
	// Id Unique identifier for the document. Either the UUID or the urlId is acceptable.
	Id string `json:"id"`
}

// PostDocumentsUpdateJSONBody defines parameters for PostDocumentsUpdate.
type PostDocumentsUpdateJSONBody struct {
	// Append If true the text field will be appended to the end of the existing document, rather than the default behavior of replacing it. This is potentially useful for things like logging into a document.
	Append *bool `json:"append,omitempty"`

	// Done Whether the editing session has finished, this will trigger any notifications. This property will soon be deprecated.
	Done *bool `json:"done,omitempty"`

	// Id Unique identifier for the document. Either the UUID or the urlId is acceptable.
	Id string `json:"id"`

	// Publish Whether this document should be published and made visible to other team members, if a draft
	Publish *bool `json:"publish,omitempty"`

	// Text The body of the document, may contain markdown formatting.
	Text *string `json:"text,omitempty"`

	// Title The title of the document.
	Title *string `json:"title,omitempty"`
}

// PostDocumentsUsersJSONBody defines parameters for PostDocumentsUsers.
type PostDocumentsUsersJSONBody struct {
	// Id Unique identifier for the document. Either the UUID or the urlId is acceptable.
	Id string `json:"id"`

	// Query If set, will filter the results by user name.
	Query *string `json:"query,omitempty"`
}

// PostDocumentsViewedJSONBody defines parameters for PostDocumentsViewed.
type PostDocumentsViewedJSONBody struct {
	Direction *PostDocumentsViewedJSONBodyDirection `json:"direction,omitempty"`
	Limit     *float32                              `json:"limit,omitempty"`
	Offset    *float32                              `json:"offset,omitempty"`
	Sort      *string                               `json:"sort,omitempty"`
}

// PostDocumentsViewedJSONBodyDirection defines parameters for PostDocumentsViewed.
type PostDocumentsViewedJSONBodyDirection string

// PostEventsListJSONBody defines parameters for PostEventsList.
type PostEventsListJSONBody struct {
	// ActorId Filter to events performed by the selected user
	ActorId *openapi_types.UUID `json:"actorId,omitempty"`

	// AuditLog Whether to return detailed events suitable for an audit log. Without this flag less detailed event types will be returned.
	AuditLog *bool `json:"auditLog,omitempty"`

	// CollectionId Filter to events performed in the selected collection
	CollectionId *openapi_types.UUID              `json:"collectionId,omitempty"`
	Direction    *PostEventsListJSONBodyDirection `json:"direction,omitempty"`

	// DocumentId Filter to events performed in the selected document
	DocumentId *openapi_types.UUID `json:"documentId,omitempty"`
	Limit      *float32            `json:"limit,omitempty"`

	// Name Filter to a specific event, e.g. "collections.create". Event names are in the format "objects.verb"
	Name   *string  `json:"name,omitempty"`
	Offset *float32 `json:"offset,omitempty"`
	Sort   *string  `json:"sort,omitempty"`
}

// PostEventsListJSONBodyDirection defines parameters for PostEventsList.
type PostEventsListJSONBodyDirection string

// PostFileOperationsDeleteJSONBody defines parameters for PostFileOperationsDelete.
type PostFileOperationsDeleteJSONBody struct {
	// Id Unique identifier for the file operation.
	Id openapi_types.UUID `json:"id"`
}

// PostFileOperationsInfoJSONBody defines parameters for PostFileOperationsInfo.
type PostFileOperationsInfoJSONBody struct {
	// Id Unique identifier for the file operation.
	Id openapi_types.UUID `json:"id"`
}

// PostFileOperationsListJSONBody defines parameters for PostFileOperationsList.
type PostFileOperationsListJSONBody struct {
	Direction *PostFileOperationsListJSONBodyDirection `json:"direction,omitempty"`
	Limit     *float32                                 `json:"limit,omitempty"`
	Offset    *float32                                 `json:"offset,omitempty"`
	Sort      *string                                  `json:"sort,omitempty"`

	// Type The type of fileOperation
	Type PostFileOperationsListJSONBodyType `json:"type"`
}

// PostFileOperationsListJSONBodyDirection defines parameters for PostFileOperationsList.
type PostFileOperationsListJSONBodyDirection string

// PostFileOperationsListJSONBodyType defines parameters for PostFileOperationsList.
type PostFileOperationsListJSONBodyType string

// PostFileOperationsRedirectJSONBody defines parameters for PostFileOperationsRedirect.
type PostFileOperationsRedirectJSONBody struct {
	// Id Unique identifier for the file operation.
	Id openapi_types.UUID `json:"id"`
}

// PostGroupsAddUserJSONBody defines parameters for PostGroupsAddUser.
type PostGroupsAddUserJSONBody struct {
	Id     openapi_types.UUID `json:"id"`
	UserId openapi_types.UUID `json:"userId"`
}

// PostGroupsCreateJSONBody defines parameters for PostGroupsCreate.
type PostGroupsCreateJSONBody struct {
	Name string `json:"name"`
}

// PostGroupsDeleteJSONBody defines parameters for PostGroupsDelete.
type PostGroupsDeleteJSONBody struct {
	Id openapi_types.UUID `json:"id"`
}

// PostGroupsInfoJSONBody defines parameters for PostGroupsInfo.
type PostGroupsInfoJSONBody struct {
	// Id Unique identifier for the group.
	Id openapi_types.UUID `json:"id"`
}

// PostGroupsListJSONBody defines parameters for PostGroupsList.
type PostGroupsListJSONBody struct {
	Direction *PostGroupsListJSONBodyDirection `json:"direction,omitempty"`
	Limit     *float32                         `json:"limit,omitempty"`
	Offset    *float32                         `json:"offset,omitempty"`
	Sort      *string                          `json:"sort,omitempty"`
}

// PostGroupsListJSONBodyDirection defines parameters for PostGroupsList.
type PostGroupsListJSONBodyDirection string

// PostGroupsMembershipsJSONBody defines parameters for PostGroupsMemberships.
type PostGroupsMembershipsJSONBody struct {
	// Id Group id
	Id     string   `json:"id"`
	Limit  *float32 `json:"limit,omitempty"`
	Offset *float32 `json:"offset,omitempty"`

	// Query Filter memberships by user names
	Query *string `json:"query,omitempty"`
}

// PostGroupsRemoveUserJSONBody defines parameters for PostGroupsRemoveUser.
type PostGroupsRemoveUserJSONBody struct {
	// Id Identifier for the collection
	Id     openapi_types.UUID `json:"id"`
	UserId openapi_types.UUID `json:"userId"`
}

// PostGroupsUpdateJSONBody defines parameters for PostGroupsUpdate.
type PostGroupsUpdateJSONBody struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// PostRevisionsInfoJSONBody defines parameters for PostRevisionsInfo.
type PostRevisionsInfoJSONBody struct {
	// Id Unique identifier for the revision.
	Id openapi_types.UUID `json:"id"`
}

// PostRevisionsListJSONBody defines parameters for PostRevisionsList.
type PostRevisionsListJSONBody struct {
	Direction *PostRevisionsListJSONBodyDirection `json:"direction,omitempty"`
	Limit     *float32                            `json:"limit,omitempty"`
	Offset    *float32                            `json:"offset,omitempty"`
	Sort      *string                             `json:"sort,omitempty"`
}

// PostRevisionsListJSONBodyDirection defines parameters for PostRevisionsList.
type PostRevisionsListJSONBodyDirection string

// PostSharesCreateJSONBody defines parameters for PostSharesCreate.
type PostSharesCreateJSONBody struct {
	DocumentId openapi_types.UUID `json:"documentId"`
}

// PostSharesInfoJSONBody defines parameters for PostSharesInfo.
type PostSharesInfoJSONBody struct {
	// DocumentId Unique identifier for a document. One of id or documentId must be provided.
	DocumentId *openapi_types.UUID `json:"documentId,omitempty"`

	// Id Unique identifier for the share.
	Id *openapi_types.UUID `json:"id,omitempty"`
}

// PostSharesListJSONBody defines parameters for PostSharesList.
type PostSharesListJSONBody struct {
	Direction *PostSharesListJSONBodyDirection `json:"direction,omitempty"`
	Limit     *float32                         `json:"limit,omitempty"`
	Offset    *float32                         `json:"offset,omitempty"`
	Sort      *string                          `json:"sort,omitempty"`
}

// PostSharesListJSONBodyDirection defines parameters for PostSharesList.
type PostSharesListJSONBodyDirection string

// PostSharesRevokeJSONBody defines parameters for PostSharesRevoke.
type PostSharesRevokeJSONBody struct {
	Id openapi_types.UUID `json:"id"`
}

// PostSharesUpdateJSONBody defines parameters for PostSharesUpdate.
type PostSharesUpdateJSONBody struct {
	Id        openapi_types.UUID `json:"id"`
	Published bool               `json:"published"`
}

// PostUsersActivateJSONBody defines parameters for PostUsersActivate.
type PostUsersActivateJSONBody struct {
	// Id Unique identifier for the user.
	Id openapi_types.UUID `json:"id"`
}

// PostUsersDeleteJSONBody defines parameters for PostUsersDelete.
type PostUsersDeleteJSONBody struct {
	// Id Unique identifier for the user.
	Id openapi_types.UUID `json:"id"`
}

// PostUsersInfoJSONBody defines parameters for PostUsersInfo.
type PostUsersInfoJSONBody struct {
	// Id Unique identifier for the user.
	Id openapi_types.UUID `json:"id"`
}

// PostUsersInviteJSONBody defines parameters for PostUsersInvite.
type PostUsersInviteJSONBody struct {
	Invites []Invite `json:"invites"`
}

// PostUsersListJSONBody defines parameters for PostUsersList.
type PostUsersListJSONBody struct {
	Direction *PostUsersListJSONBodyDirection `json:"direction,omitempty"`
	Emails    *[]string                       `json:"emails,omitempty"`

	// Filter The status to filter by
	Filter *PostUsersListJSONBodyFilter `json:"filter,omitempty"`
	Limit  *float32                     `json:"limit,omitempty"`
	Offset *float32                     `json:"offset,omitempty"`
	Query  *string                      `json:"query,omitempty"`
	Role   *UserRole                    `json:"role,omitempty"`
	Sort   *string                      `json:"sort,omitempty"`
}

// PostUsersListJSONBodyDirection defines parameters for PostUsersList.
type PostUsersListJSONBodyDirection string

// PostUsersListJSONBodyFilter defines parameters for PostUsersList.
type PostUsersListJSONBodyFilter string

// PostUsersSuspendJSONBody defines parameters for PostUsersSuspend.
type PostUsersSuspendJSONBody struct {
	// Id Unique identifier for the user.
	Id openapi_types.UUID `json:"id"`
}

// PostUsersUpdateJSONBody defines parameters for PostUsersUpdate.
type PostUsersUpdateJSONBody struct {
	AvatarUrl *string `json:"avatarUrl,omitempty"`
	Language  *string `json:"language,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// PostUsersUpdateRoleJSONBody defines parameters for PostUsersUpdateRole.
type PostUsersUpdateRoleJSONBody struct {
	// Id Unique identifier for the user.
	Id   openapi_types.UUID `json:"id"`
	Role UserRole           `json:"role"`
}

// PostViewsCreateJSONBody defines parameters for PostViewsCreate.
type PostViewsCreateJSONBody struct {
	DocumentId openapi_types.UUID `json:"documentId"`
}

// PostViewsListJSONBody defines parameters for PostViewsList.
type PostViewsListJSONBody struct {
	DocumentId openapi_types.UUID `json:"documentId"`
}

// PostAttachmentsCreateJSONRequestBody defines body for PostAttachmentsCreate for application/json ContentType.
type PostAttachmentsCreateJSONRequestBody PostAttachmentsCreateJSONBody

// PostAttachmentsDeleteJSONRequestBody defines body for PostAttachmentsDelete for application/json ContentType.
type PostAttachmentsDeleteJSONRequestBody PostAttachmentsDeleteJSONBody

// PostAttachmentsRedirectJSONRequestBody defines body for PostAttachmentsRedirect for application/json ContentType.
type PostAttachmentsRedirectJSONRequestBody PostAttachmentsRedirectJSONBody

// PostCollectionsAddGroupJSONRequestBody defines body for PostCollectionsAddGroup for application/json ContentType.
type PostCollectionsAddGroupJSONRequestBody PostCollectionsAddGroupJSONBody

// PostCollectionsAddUserJSONRequestBody defines body for PostCollectionsAddUser for application/json ContentType.
type PostCollectionsAddUserJSONRequestBody PostCollectionsAddUserJSONBody

// PostCollectionsCreateJSONRequestBody defines body for PostCollectionsCreate for application/json ContentType.
type PostCollectionsCreateJSONRequestBody PostCollectionsCreateJSONBody

// PostCollectionsDeleteJSONRequestBody defines body for PostCollectionsDelete for application/json ContentType.
type PostCollectionsDeleteJSONRequestBody PostCollectionsDeleteJSONBody

// PostCollectionsDocumentsJSONRequestBody defines body for PostCollectionsDocuments for application/json ContentType.
type PostCollectionsDocumentsJSONRequestBody PostCollectionsDocumentsJSONBody

// PostCollectionsExportJSONRequestBody defines body for PostCollectionsExport for application/json ContentType.
type PostCollectionsExportJSONRequestBody PostCollectionsExportJSONBody

// PostCollectionsExportAllJSONRequestBody defines body for PostCollectionsExportAll for application/json ContentType.
type PostCollectionsExportAllJSONRequestBody PostCollectionsExportAllJSONBody

// PostCollectionsGroupMembershipsJSONRequestBody defines body for PostCollectionsGroupMemberships for application/json ContentType.
type PostCollectionsGroupMembershipsJSONRequestBody PostCollectionsGroupMembershipsJSONBody

// PostCollectionsInfoJSONRequestBody defines body for PostCollectionsInfo for application/json ContentType.
type PostCollectionsInfoJSONRequestBody PostCollectionsInfoJSONBody

// PostCollectionsListJSONRequestBody defines body for PostCollectionsList for application/json ContentType.
type PostCollectionsListJSONRequestBody = Pagination

// PostCollectionsMembershipsJSONRequestBody defines body for PostCollectionsMemberships for application/json ContentType.
type PostCollectionsMembershipsJSONRequestBody PostCollectionsMembershipsJSONBody

// PostCollectionsRemoveGroupJSONRequestBody defines body for PostCollectionsRemoveGroup for application/json ContentType.
type PostCollectionsRemoveGroupJSONRequestBody PostCollectionsRemoveGroupJSONBody

// PostCollectionsRemoveUserJSONRequestBody defines body for PostCollectionsRemoveUser for application/json ContentType.
type PostCollectionsRemoveUserJSONRequestBody PostCollectionsRemoveUserJSONBody

// PostCollectionsUpdateJSONRequestBody defines body for PostCollectionsUpdate for application/json ContentType.
type PostCollectionsUpdateJSONRequestBody PostCollectionsUpdateJSONBody

// PostCommentsCreateJSONRequestBody defines body for PostCommentsCreate for application/json ContentType.
type PostCommentsCreateJSONRequestBody PostCommentsCreateJSONBody

// PostCommentsDeleteJSONRequestBody defines body for PostCommentsDelete for application/json ContentType.
type PostCommentsDeleteJSONRequestBody PostCommentsDeleteJSONBody

// PostCommentsListJSONRequestBody defines body for PostCommentsList for application/json ContentType.
type PostCommentsListJSONRequestBody PostCommentsListJSONBody

// PostCommentsUpdateJSONRequestBody defines body for PostCommentsUpdate for application/json ContentType.
type PostCommentsUpdateJSONRequestBody PostCommentsUpdateJSONBody

// PostDocumentsAddUserJSONRequestBody defines body for PostDocumentsAddUser for application/json ContentType.
type PostDocumentsAddUserJSONRequestBody PostDocumentsAddUserJSONBody

// PostDocumentsArchiveJSONRequestBody defines body for PostDocumentsArchive for application/json ContentType.
type PostDocumentsArchiveJSONRequestBody PostDocumentsArchiveJSONBody

// PostDocumentsCreateJSONRequestBody defines body for PostDocumentsCreate for application/json ContentType.
type PostDocumentsCreateJSONRequestBody PostDocumentsCreateJSONBody

// PostDocumentsDeleteJSONRequestBody defines body for PostDocumentsDelete for application/json ContentType.
type PostDocumentsDeleteJSONRequestBody PostDocumentsDeleteJSONBody

// PostDocumentsDraftsJSONRequestBody defines body for PostDocumentsDrafts for application/json ContentType.
type PostDocumentsDraftsJSONRequestBody PostDocumentsDraftsJSONBody

// PostDocumentsExportJSONRequestBody defines body for PostDocumentsExport for application/json ContentType.
type PostDocumentsExportJSONRequestBody PostDocumentsExportJSONBody

// PostDocumentsImportMultipartRequestBody defines body for PostDocumentsImport for multipart/form-data ContentType.
type PostDocumentsImportMultipartRequestBody PostDocumentsImportMultipartBody

// PostDocumentsInfoJSONRequestBody defines body for PostDocumentsInfo for application/json ContentType.
type PostDocumentsInfoJSONRequestBody PostDocumentsInfoJSONBody

// PostDocumentsListJSONRequestBody defines body for PostDocumentsList for application/json ContentType.
type PostDocumentsListJSONRequestBody PostDocumentsListJSONBody

// PostDocumentsMembershipsJSONRequestBody defines body for PostDocumentsMemberships for application/json ContentType.
type PostDocumentsMembershipsJSONRequestBody PostDocumentsMembershipsJSONBody

// PostDocumentsMoveJSONRequestBody defines body for PostDocumentsMove for application/json ContentType.
type PostDocumentsMoveJSONRequestBody PostDocumentsMoveJSONBody

// PostDocumentsRemoveUserJSONRequestBody defines body for PostDocumentsRemoveUser for application/json ContentType.
type PostDocumentsRemoveUserJSONRequestBody PostDocumentsRemoveUserJSONBody

// PostDocumentsRestoreJSONRequestBody defines body for PostDocumentsRestore for application/json ContentType.
type PostDocumentsRestoreJSONRequestBody PostDocumentsRestoreJSONBody

// PostDocumentsSearchJSONRequestBody defines body for PostDocumentsSearch for application/json ContentType.
type PostDocumentsSearchJSONRequestBody PostDocumentsSearchJSONBody

// PostDocumentsStarJSONRequestBody defines body for PostDocumentsStar for application/json ContentType.
type PostDocumentsStarJSONRequestBody PostDocumentsStarJSONBody

// PostDocumentsTemplatizeJSONRequestBody defines body for PostDocumentsTemplatize for application/json ContentType.
type PostDocumentsTemplatizeJSONRequestBody PostDocumentsTemplatizeJSONBody

// PostDocumentsUnpublishJSONRequestBody defines body for PostDocumentsUnpublish for application/json ContentType.
type PostDocumentsUnpublishJSONRequestBody PostDocumentsUnpublishJSONBody

// PostDocumentsUnstarJSONRequestBody defines body for PostDocumentsUnstar for application/json ContentType.
type PostDocumentsUnstarJSONRequestBody PostDocumentsUnstarJSONBody

// PostDocumentsUpdateJSONRequestBody defines body for PostDocumentsUpdate for application/json ContentType.
type PostDocumentsUpdateJSONRequestBody PostDocumentsUpdateJSONBody

// PostDocumentsUsersJSONRequestBody defines body for PostDocumentsUsers for application/json ContentType.
type PostDocumentsUsersJSONRequestBody PostDocumentsUsersJSONBody

// PostDocumentsViewedJSONRequestBody defines body for PostDocumentsViewed for application/json ContentType.
type PostDocumentsViewedJSONRequestBody PostDocumentsViewedJSONBody

// PostEventsListJSONRequestBody defines body for PostEventsList for application/json ContentType.
type PostEventsListJSONRequestBody PostEventsListJSONBody

// PostFileOperationsDeleteJSONRequestBody defines body for PostFileOperationsDelete for application/json ContentType.
type PostFileOperationsDeleteJSONRequestBody PostFileOperationsDeleteJSONBody

// PostFileOperationsInfoJSONRequestBody defines body for PostFileOperationsInfo for application/json ContentType.
type PostFileOperationsInfoJSONRequestBody PostFileOperationsInfoJSONBody

// PostFileOperationsListJSONRequestBody defines body for PostFileOperationsList for application/json ContentType.
type PostFileOperationsListJSONRequestBody PostFileOperationsListJSONBody

// PostFileOperationsRedirectJSONRequestBody defines body for PostFileOperationsRedirect for application/json ContentType.
type PostFileOperationsRedirectJSONRequestBody PostFileOperationsRedirectJSONBody

// PostGroupsAddUserJSONRequestBody defines body for PostGroupsAddUser for application/json ContentType.
type PostGroupsAddUserJSONRequestBody PostGroupsAddUserJSONBody

// PostGroupsCreateJSONRequestBody defines body for PostGroupsCreate for application/json ContentType.
type PostGroupsCreateJSONRequestBody PostGroupsCreateJSONBody

// PostGroupsDeleteJSONRequestBody defines body for PostGroupsDelete for application/json ContentType.
type PostGroupsDeleteJSONRequestBody PostGroupsDeleteJSONBody

// PostGroupsInfoJSONRequestBody defines body for PostGroupsInfo for application/json ContentType.
type PostGroupsInfoJSONRequestBody PostGroupsInfoJSONBody

// PostGroupsListJSONRequestBody defines body for PostGroupsList for application/json ContentType.
type PostGroupsListJSONRequestBody PostGroupsListJSONBody

// PostGroupsMembershipsJSONRequestBody defines body for PostGroupsMemberships for application/json ContentType.
type PostGroupsMembershipsJSONRequestBody PostGroupsMembershipsJSONBody

// PostGroupsRemoveUserJSONRequestBody defines body for PostGroupsRemoveUser for application/json ContentType.
type PostGroupsRemoveUserJSONRequestBody PostGroupsRemoveUserJSONBody

// PostGroupsUpdateJSONRequestBody defines body for PostGroupsUpdate for application/json ContentType.
type PostGroupsUpdateJSONRequestBody PostGroupsUpdateJSONBody

// PostRevisionsInfoJSONRequestBody defines body for PostRevisionsInfo for application/json ContentType.
type PostRevisionsInfoJSONRequestBody PostRevisionsInfoJSONBody

// PostRevisionsListJSONRequestBody defines body for PostRevisionsList for application/json ContentType.
type PostRevisionsListJSONRequestBody PostRevisionsListJSONBody

// PostSharesCreateJSONRequestBody defines body for PostSharesCreate for application/json ContentType.
type PostSharesCreateJSONRequestBody PostSharesCreateJSONBody

// PostSharesInfoJSONRequestBody defines body for PostSharesInfo for application/json ContentType.
type PostSharesInfoJSONRequestBody PostSharesInfoJSONBody

// PostSharesListJSONRequestBody defines body for PostSharesList for application/json ContentType.
type PostSharesListJSONRequestBody PostSharesListJSONBody

// PostSharesRevokeJSONRequestBody defines body for PostSharesRevoke for application/json ContentType.
type PostSharesRevokeJSONRequestBody PostSharesRevokeJSONBody

// PostSharesUpdateJSONRequestBody defines body for PostSharesUpdate for application/json ContentType.
type PostSharesUpdateJSONRequestBody PostSharesUpdateJSONBody

// PostUsersActivateJSONRequestBody defines body for PostUsersActivate for application/json ContentType.
type PostUsersActivateJSONRequestBody PostUsersActivateJSONBody

// PostUsersDeleteJSONRequestBody defines body for PostUsersDelete for application/json ContentType.
type PostUsersDeleteJSONRequestBody PostUsersDeleteJSONBody

// PostUsersInfoJSONRequestBody defines body for PostUsersInfo for application/json ContentType.
type PostUsersInfoJSONRequestBody PostUsersInfoJSONBody

// PostUsersInviteJSONRequestBody defines body for PostUsersInvite for application/json ContentType.
type PostUsersInviteJSONRequestBody PostUsersInviteJSONBody

// PostUsersListJSONRequestBody defines body for PostUsersList for application/json ContentType.
type PostUsersListJSONRequestBody PostUsersListJSONBody

// PostUsersSuspendJSONRequestBody defines body for PostUsersSuspend for application/json ContentType.
type PostUsersSuspendJSONRequestBody PostUsersSuspendJSONBody

// PostUsersUpdateJSONRequestBody defines body for PostUsersUpdate for application/json ContentType.
type PostUsersUpdateJSONRequestBody PostUsersUpdateJSONBody

// PostUsersUpdateRoleJSONRequestBody defines body for PostUsersUpdateRole for application/json ContentType.
type PostUsersUpdateRoleJSONRequestBody PostUsersUpdateRoleJSONBody

// PostViewsCreateJSONRequestBody defines body for PostViewsCreate for application/json ContentType.
type PostViewsCreateJSONRequestBody PostViewsCreateJSONBody

// PostViewsListJSONRequestBody defines body for PostViewsList for application/json ContentType.
type PostViewsListJSONRequestBody PostViewsListJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAttachmentsCreateWithBody request with any body
	PostAttachmentsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAttachmentsCreate(ctx context.Context, body PostAttachmentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAttachmentsDeleteWithBody request with any body
	PostAttachmentsDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAttachmentsDelete(ctx context.Context, body PostAttachmentsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAttachmentsRedirectWithBody request with any body
	PostAttachmentsRedirectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAttachmentsRedirect(ctx context.Context, body PostAttachmentsRedirectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthConfig request
	PostAuthConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthInfo request
	PostAuthInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCollectionsAddGroupWithBody request with any body
	PostCollectionsAddGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCollectionsAddGroup(ctx context.Context, body PostCollectionsAddGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCollectionsAddUserWithBody request with any body
	PostCollectionsAddUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCollectionsAddUser(ctx context.Context, body PostCollectionsAddUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCollectionsCreateWithBody request with any body
	PostCollectionsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCollectionsCreate(ctx context.Context, body PostCollectionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCollectionsDeleteWithBody request with any body
	PostCollectionsDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCollectionsDelete(ctx context.Context, body PostCollectionsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCollectionsDocumentsWithBody request with any body
	PostCollectionsDocumentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCollectionsDocuments(ctx context.Context, body PostCollectionsDocumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCollectionsExportWithBody request with any body
	PostCollectionsExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCollectionsExport(ctx context.Context, body PostCollectionsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCollectionsExportAllWithBody request with any body
	PostCollectionsExportAllWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCollectionsExportAll(ctx context.Context, body PostCollectionsExportAllJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCollectionsGroupMembershipsWithBody request with any body
	PostCollectionsGroupMembershipsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCollectionsGroupMemberships(ctx context.Context, body PostCollectionsGroupMembershipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCollectionsInfoWithBody request with any body
	PostCollectionsInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCollectionsInfo(ctx context.Context, body PostCollectionsInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCollectionsListWithBody request with any body
	PostCollectionsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCollectionsList(ctx context.Context, body PostCollectionsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCollectionsMembershipsWithBody request with any body
	PostCollectionsMembershipsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCollectionsMemberships(ctx context.Context, body PostCollectionsMembershipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCollectionsRemoveGroupWithBody request with any body
	PostCollectionsRemoveGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCollectionsRemoveGroup(ctx context.Context, body PostCollectionsRemoveGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCollectionsRemoveUserWithBody request with any body
	PostCollectionsRemoveUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCollectionsRemoveUser(ctx context.Context, body PostCollectionsRemoveUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCollectionsUpdateWithBody request with any body
	PostCollectionsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCollectionsUpdate(ctx context.Context, body PostCollectionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCommentsCreateWithBody request with any body
	PostCommentsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCommentsCreate(ctx context.Context, body PostCommentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCommentsDeleteWithBody request with any body
	PostCommentsDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCommentsDelete(ctx context.Context, body PostCommentsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCommentsListWithBody request with any body
	PostCommentsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCommentsList(ctx context.Context, body PostCommentsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCommentsUpdateWithBody request with any body
	PostCommentsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCommentsUpdate(ctx context.Context, body PostCommentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDocumentsAddUserWithBody request with any body
	PostDocumentsAddUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDocumentsAddUser(ctx context.Context, body PostDocumentsAddUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDocumentsArchiveWithBody request with any body
	PostDocumentsArchiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDocumentsArchive(ctx context.Context, body PostDocumentsArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDocumentsCreateWithBody request with any body
	PostDocumentsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDocumentsCreate(ctx context.Context, body PostDocumentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDocumentsDeleteWithBody request with any body
	PostDocumentsDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDocumentsDelete(ctx context.Context, body PostDocumentsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDocumentsDraftsWithBody request with any body
	PostDocumentsDraftsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDocumentsDrafts(ctx context.Context, body PostDocumentsDraftsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDocumentsExportWithBody request with any body
	PostDocumentsExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDocumentsExport(ctx context.Context, body PostDocumentsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDocumentsImportWithBody request with any body
	PostDocumentsImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDocumentsInfoWithBody request with any body
	PostDocumentsInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDocumentsInfo(ctx context.Context, body PostDocumentsInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDocumentsListWithBody request with any body
	PostDocumentsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDocumentsList(ctx context.Context, body PostDocumentsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDocumentsMembershipsWithBody request with any body
	PostDocumentsMembershipsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDocumentsMemberships(ctx context.Context, body PostDocumentsMembershipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDocumentsMoveWithBody request with any body
	PostDocumentsMoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDocumentsMove(ctx context.Context, body PostDocumentsMoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDocumentsRemoveUserWithBody request with any body
	PostDocumentsRemoveUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDocumentsRemoveUser(ctx context.Context, body PostDocumentsRemoveUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDocumentsRestoreWithBody request with any body
	PostDocumentsRestoreWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDocumentsRestore(ctx context.Context, body PostDocumentsRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDocumentsSearchWithBody request with any body
	PostDocumentsSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDocumentsSearch(ctx context.Context, body PostDocumentsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDocumentsStarWithBody request with any body
	PostDocumentsStarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDocumentsStar(ctx context.Context, body PostDocumentsStarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDocumentsTemplatizeWithBody request with any body
	PostDocumentsTemplatizeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDocumentsTemplatize(ctx context.Context, body PostDocumentsTemplatizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDocumentsUnpublishWithBody request with any body
	PostDocumentsUnpublishWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDocumentsUnpublish(ctx context.Context, body PostDocumentsUnpublishJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDocumentsUnstarWithBody request with any body
	PostDocumentsUnstarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDocumentsUnstar(ctx context.Context, body PostDocumentsUnstarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDocumentsUpdateWithBody request with any body
	PostDocumentsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDocumentsUpdate(ctx context.Context, body PostDocumentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDocumentsUsersWithBody request with any body
	PostDocumentsUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDocumentsUsers(ctx context.Context, body PostDocumentsUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDocumentsViewedWithBody request with any body
	PostDocumentsViewedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDocumentsViewed(ctx context.Context, body PostDocumentsViewedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEventsListWithBody request with any body
	PostEventsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEventsList(ctx context.Context, body PostEventsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFileOperationsDeleteWithBody request with any body
	PostFileOperationsDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFileOperationsDelete(ctx context.Context, body PostFileOperationsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFileOperationsInfoWithBody request with any body
	PostFileOperationsInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFileOperationsInfo(ctx context.Context, body PostFileOperationsInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFileOperationsListWithBody request with any body
	PostFileOperationsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFileOperationsList(ctx context.Context, body PostFileOperationsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFileOperationsRedirectWithBody request with any body
	PostFileOperationsRedirectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFileOperationsRedirect(ctx context.Context, body PostFileOperationsRedirectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGroupsAddUserWithBody request with any body
	PostGroupsAddUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroupsAddUser(ctx context.Context, body PostGroupsAddUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGroupsCreateWithBody request with any body
	PostGroupsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroupsCreate(ctx context.Context, body PostGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGroupsDeleteWithBody request with any body
	PostGroupsDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroupsDelete(ctx context.Context, body PostGroupsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGroupsInfoWithBody request with any body
	PostGroupsInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroupsInfo(ctx context.Context, body PostGroupsInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGroupsListWithBody request with any body
	PostGroupsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroupsList(ctx context.Context, body PostGroupsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGroupsMembershipsWithBody request with any body
	PostGroupsMembershipsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroupsMemberships(ctx context.Context, body PostGroupsMembershipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGroupsRemoveUserWithBody request with any body
	PostGroupsRemoveUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroupsRemoveUser(ctx context.Context, body PostGroupsRemoveUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGroupsUpdateWithBody request with any body
	PostGroupsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroupsUpdate(ctx context.Context, body PostGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRevisionsInfoWithBody request with any body
	PostRevisionsInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRevisionsInfo(ctx context.Context, body PostRevisionsInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRevisionsListWithBody request with any body
	PostRevisionsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRevisionsList(ctx context.Context, body PostRevisionsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSharesCreateWithBody request with any body
	PostSharesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSharesCreate(ctx context.Context, body PostSharesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSharesInfoWithBody request with any body
	PostSharesInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSharesInfo(ctx context.Context, body PostSharesInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSharesListWithBody request with any body
	PostSharesListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSharesList(ctx context.Context, body PostSharesListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSharesRevokeWithBody request with any body
	PostSharesRevokeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSharesRevoke(ctx context.Context, body PostSharesRevokeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSharesUpdateWithBody request with any body
	PostSharesUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSharesUpdate(ctx context.Context, body PostSharesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersActivateWithBody request with any body
	PostUsersActivateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsersActivate(ctx context.Context, body PostUsersActivateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersDeleteWithBody request with any body
	PostUsersDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsersDelete(ctx context.Context, body PostUsersDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersInfoWithBody request with any body
	PostUsersInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsersInfo(ctx context.Context, body PostUsersInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersInviteWithBody request with any body
	PostUsersInviteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsersInvite(ctx context.Context, body PostUsersInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersListWithBody request with any body
	PostUsersListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsersList(ctx context.Context, body PostUsersListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersSuspendWithBody request with any body
	PostUsersSuspendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsersSuspend(ctx context.Context, body PostUsersSuspendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersUpdateWithBody request with any body
	PostUsersUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsersUpdate(ctx context.Context, body PostUsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersUpdateRoleWithBody request with any body
	PostUsersUpdateRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsersUpdateRole(ctx context.Context, body PostUsersUpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostViewsCreateWithBody request with any body
	PostViewsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostViewsCreate(ctx context.Context, body PostViewsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostViewsListWithBody request with any body
	PostViewsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostViewsList(ctx context.Context, body PostViewsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAttachmentsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAttachmentsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAttachmentsCreate(ctx context.Context, body PostAttachmentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAttachmentsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAttachmentsDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAttachmentsDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAttachmentsDelete(ctx context.Context, body PostAttachmentsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAttachmentsDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAttachmentsRedirectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAttachmentsRedirectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAttachmentsRedirect(ctx context.Context, body PostAttachmentsRedirectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAttachmentsRedirectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsAddGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsAddGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsAddGroup(ctx context.Context, body PostCollectionsAddGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsAddGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsAddUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsAddUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsAddUser(ctx context.Context, body PostCollectionsAddUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsAddUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsCreate(ctx context.Context, body PostCollectionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsDelete(ctx context.Context, body PostCollectionsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsDocumentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsDocumentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsDocuments(ctx context.Context, body PostCollectionsDocumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsDocumentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsExportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsExport(ctx context.Context, body PostCollectionsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsExportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsExportAllWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsExportAllRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsExportAll(ctx context.Context, body PostCollectionsExportAllJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsExportAllRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsGroupMembershipsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsGroupMembershipsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsGroupMemberships(ctx context.Context, body PostCollectionsGroupMembershipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsGroupMembershipsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsInfo(ctx context.Context, body PostCollectionsInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsInfoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsList(ctx context.Context, body PostCollectionsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsListRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsMembershipsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsMembershipsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsMemberships(ctx context.Context, body PostCollectionsMembershipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsMembershipsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsRemoveGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsRemoveGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsRemoveGroup(ctx context.Context, body PostCollectionsRemoveGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsRemoveGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsRemoveUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsRemoveUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsRemoveUser(ctx context.Context, body PostCollectionsRemoveUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsRemoveUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsUpdate(ctx context.Context, body PostCollectionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCommentsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCommentsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCommentsCreate(ctx context.Context, body PostCommentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCommentsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCommentsDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCommentsDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCommentsDelete(ctx context.Context, body PostCommentsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCommentsDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCommentsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCommentsListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCommentsList(ctx context.Context, body PostCommentsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCommentsListRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCommentsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCommentsUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCommentsUpdate(ctx context.Context, body PostCommentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCommentsUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsAddUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsAddUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsAddUser(ctx context.Context, body PostDocumentsAddUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsAddUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsArchiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsArchiveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsArchive(ctx context.Context, body PostDocumentsArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsArchiveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsCreate(ctx context.Context, body PostDocumentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsDelete(ctx context.Context, body PostDocumentsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsDraftsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsDraftsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsDrafts(ctx context.Context, body PostDocumentsDraftsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsDraftsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsExportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsExport(ctx context.Context, body PostDocumentsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsExportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsImportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsInfo(ctx context.Context, body PostDocumentsInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsInfoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsList(ctx context.Context, body PostDocumentsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsListRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsMembershipsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsMembershipsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsMemberships(ctx context.Context, body PostDocumentsMembershipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsMembershipsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsMoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsMoveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsMove(ctx context.Context, body PostDocumentsMoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsMoveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsRemoveUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsRemoveUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsRemoveUser(ctx context.Context, body PostDocumentsRemoveUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsRemoveUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsRestoreWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsRestoreRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsRestore(ctx context.Context, body PostDocumentsRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsRestoreRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsSearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsSearch(ctx context.Context, body PostDocumentsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsSearchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsStarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsStarRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsStar(ctx context.Context, body PostDocumentsStarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsStarRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsTemplatizeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsTemplatizeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsTemplatize(ctx context.Context, body PostDocumentsTemplatizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsTemplatizeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsUnpublishWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsUnpublishRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsUnpublish(ctx context.Context, body PostDocumentsUnpublishJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsUnpublishRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsUnstarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsUnstarRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsUnstar(ctx context.Context, body PostDocumentsUnstarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsUnstarRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsUpdate(ctx context.Context, body PostDocumentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsUsersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsUsers(ctx context.Context, body PostDocumentsUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsUsersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsViewedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsViewedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDocumentsViewed(ctx context.Context, body PostDocumentsViewedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDocumentsViewedRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEventsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEventsListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEventsList(ctx context.Context, body PostEventsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEventsListRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFileOperationsDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFileOperationsDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFileOperationsDelete(ctx context.Context, body PostFileOperationsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFileOperationsDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFileOperationsInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFileOperationsInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFileOperationsInfo(ctx context.Context, body PostFileOperationsInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFileOperationsInfoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFileOperationsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFileOperationsListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFileOperationsList(ctx context.Context, body PostFileOperationsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFileOperationsListRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFileOperationsRedirectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFileOperationsRedirectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFileOperationsRedirect(ctx context.Context, body PostFileOperationsRedirectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFileOperationsRedirectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupsAddUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsAddUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupsAddUser(ctx context.Context, body PostGroupsAddUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsAddUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupsCreate(ctx context.Context, body PostGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupsDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupsDelete(ctx context.Context, body PostGroupsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupsInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupsInfo(ctx context.Context, body PostGroupsInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsInfoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupsList(ctx context.Context, body PostGroupsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsListRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupsMembershipsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsMembershipsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupsMemberships(ctx context.Context, body PostGroupsMembershipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsMembershipsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupsRemoveUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsRemoveUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupsRemoveUser(ctx context.Context, body PostGroupsRemoveUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsRemoveUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupsUpdate(ctx context.Context, body PostGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRevisionsInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRevisionsInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRevisionsInfo(ctx context.Context, body PostRevisionsInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRevisionsInfoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRevisionsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRevisionsListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRevisionsList(ctx context.Context, body PostRevisionsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRevisionsListRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharesCreate(ctx context.Context, body PostSharesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharesInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharesInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharesInfo(ctx context.Context, body PostSharesInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharesInfoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharesListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharesListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharesList(ctx context.Context, body PostSharesListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharesListRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharesRevokeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharesRevokeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharesRevoke(ctx context.Context, body PostSharesRevokeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharesRevokeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharesUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharesUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSharesUpdate(ctx context.Context, body PostSharesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSharesUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersActivateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersActivateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersActivate(ctx context.Context, body PostUsersActivateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersActivateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersDelete(ctx context.Context, body PostUsersDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersInfo(ctx context.Context, body PostUsersInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersInfoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersInviteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersInviteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersInvite(ctx context.Context, body PostUsersInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersInviteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersList(ctx context.Context, body PostUsersListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersListRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersSuspendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersSuspendRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersSuspend(ctx context.Context, body PostUsersSuspendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersSuspendRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersUpdate(ctx context.Context, body PostUsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersUpdateRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersUpdateRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersUpdateRole(ctx context.Context, body PostUsersUpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersUpdateRoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostViewsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostViewsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostViewsCreate(ctx context.Context, body PostViewsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostViewsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostViewsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostViewsListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostViewsList(ctx context.Context, body PostViewsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostViewsListRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAttachmentsCreateRequest calls the generic PostAttachmentsCreate builder with application/json body
func NewPostAttachmentsCreateRequest(server string, body PostAttachmentsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAttachmentsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAttachmentsCreateRequestWithBody generates requests for PostAttachmentsCreate with any type of body
func NewPostAttachmentsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attachments.create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAttachmentsDeleteRequest calls the generic PostAttachmentsDelete builder with application/json body
func NewPostAttachmentsDeleteRequest(server string, body PostAttachmentsDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAttachmentsDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAttachmentsDeleteRequestWithBody generates requests for PostAttachmentsDelete with any type of body
func NewPostAttachmentsDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attachments.delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAttachmentsRedirectRequest calls the generic PostAttachmentsRedirect builder with application/json body
func NewPostAttachmentsRedirectRequest(server string, body PostAttachmentsRedirectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAttachmentsRedirectRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAttachmentsRedirectRequestWithBody generates requests for PostAttachmentsRedirect with any type of body
func NewPostAttachmentsRedirectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attachments.redirect")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAuthConfigRequest generates requests for PostAuthConfig
func NewPostAuthConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth.config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthInfoRequest generates requests for PostAuthInfo
func NewPostAuthInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth.info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCollectionsAddGroupRequest calls the generic PostCollectionsAddGroup builder with application/json body
func NewPostCollectionsAddGroupRequest(server string, body PostCollectionsAddGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCollectionsAddGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCollectionsAddGroupRequestWithBody generates requests for PostCollectionsAddGroup with any type of body
func NewPostCollectionsAddGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections.add_group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCollectionsAddUserRequest calls the generic PostCollectionsAddUser builder with application/json body
func NewPostCollectionsAddUserRequest(server string, body PostCollectionsAddUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCollectionsAddUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCollectionsAddUserRequestWithBody generates requests for PostCollectionsAddUser with any type of body
func NewPostCollectionsAddUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections.add_user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCollectionsCreateRequest calls the generic PostCollectionsCreate builder with application/json body
func NewPostCollectionsCreateRequest(server string, body PostCollectionsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCollectionsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCollectionsCreateRequestWithBody generates requests for PostCollectionsCreate with any type of body
func NewPostCollectionsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections.create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCollectionsDeleteRequest calls the generic PostCollectionsDelete builder with application/json body
func NewPostCollectionsDeleteRequest(server string, body PostCollectionsDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCollectionsDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCollectionsDeleteRequestWithBody generates requests for PostCollectionsDelete with any type of body
func NewPostCollectionsDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections.delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCollectionsDocumentsRequest calls the generic PostCollectionsDocuments builder with application/json body
func NewPostCollectionsDocumentsRequest(server string, body PostCollectionsDocumentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCollectionsDocumentsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCollectionsDocumentsRequestWithBody generates requests for PostCollectionsDocuments with any type of body
func NewPostCollectionsDocumentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections.documents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCollectionsExportRequest calls the generic PostCollectionsExport builder with application/json body
func NewPostCollectionsExportRequest(server string, body PostCollectionsExportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCollectionsExportRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCollectionsExportRequestWithBody generates requests for PostCollectionsExport with any type of body
func NewPostCollectionsExportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections.export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCollectionsExportAllRequest calls the generic PostCollectionsExportAll builder with application/json body
func NewPostCollectionsExportAllRequest(server string, body PostCollectionsExportAllJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCollectionsExportAllRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCollectionsExportAllRequestWithBody generates requests for PostCollectionsExportAll with any type of body
func NewPostCollectionsExportAllRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections.export_all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCollectionsGroupMembershipsRequest calls the generic PostCollectionsGroupMemberships builder with application/json body
func NewPostCollectionsGroupMembershipsRequest(server string, body PostCollectionsGroupMembershipsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCollectionsGroupMembershipsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCollectionsGroupMembershipsRequestWithBody generates requests for PostCollectionsGroupMemberships with any type of body
func NewPostCollectionsGroupMembershipsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections.group_memberships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCollectionsInfoRequest calls the generic PostCollectionsInfo builder with application/json body
func NewPostCollectionsInfoRequest(server string, body PostCollectionsInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCollectionsInfoRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCollectionsInfoRequestWithBody generates requests for PostCollectionsInfo with any type of body
func NewPostCollectionsInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections.info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCollectionsListRequest calls the generic PostCollectionsList builder with application/json body
func NewPostCollectionsListRequest(server string, body PostCollectionsListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCollectionsListRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCollectionsListRequestWithBody generates requests for PostCollectionsList with any type of body
func NewPostCollectionsListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCollectionsMembershipsRequest calls the generic PostCollectionsMemberships builder with application/json body
func NewPostCollectionsMembershipsRequest(server string, body PostCollectionsMembershipsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCollectionsMembershipsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCollectionsMembershipsRequestWithBody generates requests for PostCollectionsMemberships with any type of body
func NewPostCollectionsMembershipsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections.memberships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCollectionsRemoveGroupRequest calls the generic PostCollectionsRemoveGroup builder with application/json body
func NewPostCollectionsRemoveGroupRequest(server string, body PostCollectionsRemoveGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCollectionsRemoveGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCollectionsRemoveGroupRequestWithBody generates requests for PostCollectionsRemoveGroup with any type of body
func NewPostCollectionsRemoveGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections.remove_group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCollectionsRemoveUserRequest calls the generic PostCollectionsRemoveUser builder with application/json body
func NewPostCollectionsRemoveUserRequest(server string, body PostCollectionsRemoveUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCollectionsRemoveUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCollectionsRemoveUserRequestWithBody generates requests for PostCollectionsRemoveUser with any type of body
func NewPostCollectionsRemoveUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections.remove_user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCollectionsUpdateRequest calls the generic PostCollectionsUpdate builder with application/json body
func NewPostCollectionsUpdateRequest(server string, body PostCollectionsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCollectionsUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCollectionsUpdateRequestWithBody generates requests for PostCollectionsUpdate with any type of body
func NewPostCollectionsUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections.update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCommentsCreateRequest calls the generic PostCommentsCreate builder with application/json body
func NewPostCommentsCreateRequest(server string, body PostCommentsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCommentsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCommentsCreateRequestWithBody generates requests for PostCommentsCreate with any type of body
func NewPostCommentsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/comments.create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCommentsDeleteRequest calls the generic PostCommentsDelete builder with application/json body
func NewPostCommentsDeleteRequest(server string, body PostCommentsDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCommentsDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCommentsDeleteRequestWithBody generates requests for PostCommentsDelete with any type of body
func NewPostCommentsDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/comments.delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCommentsListRequest calls the generic PostCommentsList builder with application/json body
func NewPostCommentsListRequest(server string, body PostCommentsListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCommentsListRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCommentsListRequestWithBody generates requests for PostCommentsList with any type of body
func NewPostCommentsListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/comments.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCommentsUpdateRequest calls the generic PostCommentsUpdate builder with application/json body
func NewPostCommentsUpdateRequest(server string, body PostCommentsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCommentsUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCommentsUpdateRequestWithBody generates requests for PostCommentsUpdate with any type of body
func NewPostCommentsUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/comments.update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDocumentsAddUserRequest calls the generic PostDocumentsAddUser builder with application/json body
func NewPostDocumentsAddUserRequest(server string, body PostDocumentsAddUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDocumentsAddUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDocumentsAddUserRequestWithBody generates requests for PostDocumentsAddUser with any type of body
func NewPostDocumentsAddUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents.add_user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDocumentsArchiveRequest calls the generic PostDocumentsArchive builder with application/json body
func NewPostDocumentsArchiveRequest(server string, body PostDocumentsArchiveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDocumentsArchiveRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDocumentsArchiveRequestWithBody generates requests for PostDocumentsArchive with any type of body
func NewPostDocumentsArchiveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents.archive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDocumentsCreateRequest calls the generic PostDocumentsCreate builder with application/json body
func NewPostDocumentsCreateRequest(server string, body PostDocumentsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDocumentsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDocumentsCreateRequestWithBody generates requests for PostDocumentsCreate with any type of body
func NewPostDocumentsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents.create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDocumentsDeleteRequest calls the generic PostDocumentsDelete builder with application/json body
func NewPostDocumentsDeleteRequest(server string, body PostDocumentsDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDocumentsDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDocumentsDeleteRequestWithBody generates requests for PostDocumentsDelete with any type of body
func NewPostDocumentsDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents.delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDocumentsDraftsRequest calls the generic PostDocumentsDrafts builder with application/json body
func NewPostDocumentsDraftsRequest(server string, body PostDocumentsDraftsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDocumentsDraftsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDocumentsDraftsRequestWithBody generates requests for PostDocumentsDrafts with any type of body
func NewPostDocumentsDraftsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents.drafts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDocumentsExportRequest calls the generic PostDocumentsExport builder with application/json body
func NewPostDocumentsExportRequest(server string, body PostDocumentsExportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDocumentsExportRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDocumentsExportRequestWithBody generates requests for PostDocumentsExport with any type of body
func NewPostDocumentsExportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents.export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDocumentsImportRequestWithBody generates requests for PostDocumentsImport with any type of body
func NewPostDocumentsImportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents.import")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDocumentsInfoRequest calls the generic PostDocumentsInfo builder with application/json body
func NewPostDocumentsInfoRequest(server string, body PostDocumentsInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDocumentsInfoRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDocumentsInfoRequestWithBody generates requests for PostDocumentsInfo with any type of body
func NewPostDocumentsInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents.info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDocumentsListRequest calls the generic PostDocumentsList builder with application/json body
func NewPostDocumentsListRequest(server string, body PostDocumentsListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDocumentsListRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDocumentsListRequestWithBody generates requests for PostDocumentsList with any type of body
func NewPostDocumentsListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDocumentsMembershipsRequest calls the generic PostDocumentsMemberships builder with application/json body
func NewPostDocumentsMembershipsRequest(server string, body PostDocumentsMembershipsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDocumentsMembershipsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDocumentsMembershipsRequestWithBody generates requests for PostDocumentsMemberships with any type of body
func NewPostDocumentsMembershipsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents.memberships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDocumentsMoveRequest calls the generic PostDocumentsMove builder with application/json body
func NewPostDocumentsMoveRequest(server string, body PostDocumentsMoveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDocumentsMoveRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDocumentsMoveRequestWithBody generates requests for PostDocumentsMove with any type of body
func NewPostDocumentsMoveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents.move")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDocumentsRemoveUserRequest calls the generic PostDocumentsRemoveUser builder with application/json body
func NewPostDocumentsRemoveUserRequest(server string, body PostDocumentsRemoveUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDocumentsRemoveUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDocumentsRemoveUserRequestWithBody generates requests for PostDocumentsRemoveUser with any type of body
func NewPostDocumentsRemoveUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents.remove_user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDocumentsRestoreRequest calls the generic PostDocumentsRestore builder with application/json body
func NewPostDocumentsRestoreRequest(server string, body PostDocumentsRestoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDocumentsRestoreRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDocumentsRestoreRequestWithBody generates requests for PostDocumentsRestore with any type of body
func NewPostDocumentsRestoreRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents.restore")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDocumentsSearchRequest calls the generic PostDocumentsSearch builder with application/json body
func NewPostDocumentsSearchRequest(server string, body PostDocumentsSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDocumentsSearchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDocumentsSearchRequestWithBody generates requests for PostDocumentsSearch with any type of body
func NewPostDocumentsSearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents.search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDocumentsStarRequest calls the generic PostDocumentsStar builder with application/json body
func NewPostDocumentsStarRequest(server string, body PostDocumentsStarJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDocumentsStarRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDocumentsStarRequestWithBody generates requests for PostDocumentsStar with any type of body
func NewPostDocumentsStarRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents.star")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDocumentsTemplatizeRequest calls the generic PostDocumentsTemplatize builder with application/json body
func NewPostDocumentsTemplatizeRequest(server string, body PostDocumentsTemplatizeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDocumentsTemplatizeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDocumentsTemplatizeRequestWithBody generates requests for PostDocumentsTemplatize with any type of body
func NewPostDocumentsTemplatizeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents.templatize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDocumentsUnpublishRequest calls the generic PostDocumentsUnpublish builder with application/json body
func NewPostDocumentsUnpublishRequest(server string, body PostDocumentsUnpublishJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDocumentsUnpublishRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDocumentsUnpublishRequestWithBody generates requests for PostDocumentsUnpublish with any type of body
func NewPostDocumentsUnpublishRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents.unpublish")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDocumentsUnstarRequest calls the generic PostDocumentsUnstar builder with application/json body
func NewPostDocumentsUnstarRequest(server string, body PostDocumentsUnstarJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDocumentsUnstarRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDocumentsUnstarRequestWithBody generates requests for PostDocumentsUnstar with any type of body
func NewPostDocumentsUnstarRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents.unstar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDocumentsUpdateRequest calls the generic PostDocumentsUpdate builder with application/json body
func NewPostDocumentsUpdateRequest(server string, body PostDocumentsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDocumentsUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDocumentsUpdateRequestWithBody generates requests for PostDocumentsUpdate with any type of body
func NewPostDocumentsUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents.update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDocumentsUsersRequest calls the generic PostDocumentsUsers builder with application/json body
func NewPostDocumentsUsersRequest(server string, body PostDocumentsUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDocumentsUsersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDocumentsUsersRequestWithBody generates requests for PostDocumentsUsers with any type of body
func NewPostDocumentsUsersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents.users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDocumentsViewedRequest calls the generic PostDocumentsViewed builder with application/json body
func NewPostDocumentsViewedRequest(server string, body PostDocumentsViewedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDocumentsViewedRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDocumentsViewedRequestWithBody generates requests for PostDocumentsViewed with any type of body
func NewPostDocumentsViewedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents.viewed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostEventsListRequest calls the generic PostEventsList builder with application/json body
func NewPostEventsListRequest(server string, body PostEventsListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEventsListRequestWithBody(server, "application/json", bodyReader)
}

// NewPostEventsListRequestWithBody generates requests for PostEventsList with any type of body
func NewPostEventsListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFileOperationsDeleteRequest calls the generic PostFileOperationsDelete builder with application/json body
func NewPostFileOperationsDeleteRequest(server string, body PostFileOperationsDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFileOperationsDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFileOperationsDeleteRequestWithBody generates requests for PostFileOperationsDelete with any type of body
func NewPostFileOperationsDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fileOperations.delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFileOperationsInfoRequest calls the generic PostFileOperationsInfo builder with application/json body
func NewPostFileOperationsInfoRequest(server string, body PostFileOperationsInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFileOperationsInfoRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFileOperationsInfoRequestWithBody generates requests for PostFileOperationsInfo with any type of body
func NewPostFileOperationsInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fileOperations.info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFileOperationsListRequest calls the generic PostFileOperationsList builder with application/json body
func NewPostFileOperationsListRequest(server string, body PostFileOperationsListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFileOperationsListRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFileOperationsListRequestWithBody generates requests for PostFileOperationsList with any type of body
func NewPostFileOperationsListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fileOperations.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFileOperationsRedirectRequest calls the generic PostFileOperationsRedirect builder with application/json body
func NewPostFileOperationsRedirectRequest(server string, body PostFileOperationsRedirectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFileOperationsRedirectRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFileOperationsRedirectRequestWithBody generates requests for PostFileOperationsRedirect with any type of body
func NewPostFileOperationsRedirectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fileOperations.redirect")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGroupsAddUserRequest calls the generic PostGroupsAddUser builder with application/json body
func NewPostGroupsAddUserRequest(server string, body PostGroupsAddUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupsAddUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGroupsAddUserRequestWithBody generates requests for PostGroupsAddUser with any type of body
func NewPostGroupsAddUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups.add_user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGroupsCreateRequest calls the generic PostGroupsCreate builder with application/json body
func NewPostGroupsCreateRequest(server string, body PostGroupsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGroupsCreateRequestWithBody generates requests for PostGroupsCreate with any type of body
func NewPostGroupsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups.create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGroupsDeleteRequest calls the generic PostGroupsDelete builder with application/json body
func NewPostGroupsDeleteRequest(server string, body PostGroupsDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupsDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGroupsDeleteRequestWithBody generates requests for PostGroupsDelete with any type of body
func NewPostGroupsDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups.delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGroupsInfoRequest calls the generic PostGroupsInfo builder with application/json body
func NewPostGroupsInfoRequest(server string, body PostGroupsInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupsInfoRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGroupsInfoRequestWithBody generates requests for PostGroupsInfo with any type of body
func NewPostGroupsInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups.info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGroupsListRequest calls the generic PostGroupsList builder with application/json body
func NewPostGroupsListRequest(server string, body PostGroupsListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupsListRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGroupsListRequestWithBody generates requests for PostGroupsList with any type of body
func NewPostGroupsListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGroupsMembershipsRequest calls the generic PostGroupsMemberships builder with application/json body
func NewPostGroupsMembershipsRequest(server string, body PostGroupsMembershipsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupsMembershipsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGroupsMembershipsRequestWithBody generates requests for PostGroupsMemberships with any type of body
func NewPostGroupsMembershipsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups.memberships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGroupsRemoveUserRequest calls the generic PostGroupsRemoveUser builder with application/json body
func NewPostGroupsRemoveUserRequest(server string, body PostGroupsRemoveUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupsRemoveUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGroupsRemoveUserRequestWithBody generates requests for PostGroupsRemoveUser with any type of body
func NewPostGroupsRemoveUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups.remove_user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGroupsUpdateRequest calls the generic PostGroupsUpdate builder with application/json body
func NewPostGroupsUpdateRequest(server string, body PostGroupsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupsUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGroupsUpdateRequestWithBody generates requests for PostGroupsUpdate with any type of body
func NewPostGroupsUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups.update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRevisionsInfoRequest calls the generic PostRevisionsInfo builder with application/json body
func NewPostRevisionsInfoRequest(server string, body PostRevisionsInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRevisionsInfoRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRevisionsInfoRequestWithBody generates requests for PostRevisionsInfo with any type of body
func NewPostRevisionsInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/revisions.info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRevisionsListRequest calls the generic PostRevisionsList builder with application/json body
func NewPostRevisionsListRequest(server string, body PostRevisionsListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRevisionsListRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRevisionsListRequestWithBody generates requests for PostRevisionsList with any type of body
func NewPostRevisionsListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/revisions.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSharesCreateRequest calls the generic PostSharesCreate builder with application/json body
func NewPostSharesCreateRequest(server string, body PostSharesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSharesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSharesCreateRequestWithBody generates requests for PostSharesCreate with any type of body
func NewPostSharesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shares.create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSharesInfoRequest calls the generic PostSharesInfo builder with application/json body
func NewPostSharesInfoRequest(server string, body PostSharesInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSharesInfoRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSharesInfoRequestWithBody generates requests for PostSharesInfo with any type of body
func NewPostSharesInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shares.info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSharesListRequest calls the generic PostSharesList builder with application/json body
func NewPostSharesListRequest(server string, body PostSharesListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSharesListRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSharesListRequestWithBody generates requests for PostSharesList with any type of body
func NewPostSharesListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shares.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSharesRevokeRequest calls the generic PostSharesRevoke builder with application/json body
func NewPostSharesRevokeRequest(server string, body PostSharesRevokeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSharesRevokeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSharesRevokeRequestWithBody generates requests for PostSharesRevoke with any type of body
func NewPostSharesRevokeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shares.revoke")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSharesUpdateRequest calls the generic PostSharesUpdate builder with application/json body
func NewPostSharesUpdateRequest(server string, body PostSharesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSharesUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSharesUpdateRequestWithBody generates requests for PostSharesUpdate with any type of body
func NewPostSharesUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shares.update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUsersActivateRequest calls the generic PostUsersActivate builder with application/json body
func NewPostUsersActivateRequest(server string, body PostUsersActivateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersActivateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUsersActivateRequestWithBody generates requests for PostUsersActivate with any type of body
func NewPostUsersActivateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users.activate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUsersDeleteRequest calls the generic PostUsersDelete builder with application/json body
func NewPostUsersDeleteRequest(server string, body PostUsersDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUsersDeleteRequestWithBody generates requests for PostUsersDelete with any type of body
func NewPostUsersDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users.delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUsersInfoRequest calls the generic PostUsersInfo builder with application/json body
func NewPostUsersInfoRequest(server string, body PostUsersInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersInfoRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUsersInfoRequestWithBody generates requests for PostUsersInfo with any type of body
func NewPostUsersInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users.info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUsersInviteRequest calls the generic PostUsersInvite builder with application/json body
func NewPostUsersInviteRequest(server string, body PostUsersInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersInviteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUsersInviteRequestWithBody generates requests for PostUsersInvite with any type of body
func NewPostUsersInviteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users.invite")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUsersListRequest calls the generic PostUsersList builder with application/json body
func NewPostUsersListRequest(server string, body PostUsersListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersListRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUsersListRequestWithBody generates requests for PostUsersList with any type of body
func NewPostUsersListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUsersSuspendRequest calls the generic PostUsersSuspend builder with application/json body
func NewPostUsersSuspendRequest(server string, body PostUsersSuspendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersSuspendRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUsersSuspendRequestWithBody generates requests for PostUsersSuspend with any type of body
func NewPostUsersSuspendRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users.suspend")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUsersUpdateRequest calls the generic PostUsersUpdate builder with application/json body
func NewPostUsersUpdateRequest(server string, body PostUsersUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUsersUpdateRequestWithBody generates requests for PostUsersUpdate with any type of body
func NewPostUsersUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users.update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUsersUpdateRoleRequest calls the generic PostUsersUpdateRole builder with application/json body
func NewPostUsersUpdateRoleRequest(server string, body PostUsersUpdateRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersUpdateRoleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUsersUpdateRoleRequestWithBody generates requests for PostUsersUpdateRole with any type of body
func NewPostUsersUpdateRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users.update_role")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostViewsCreateRequest calls the generic PostViewsCreate builder with application/json body
func NewPostViewsCreateRequest(server string, body PostViewsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostViewsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostViewsCreateRequestWithBody generates requests for PostViewsCreate with any type of body
func NewPostViewsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/views.create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostViewsListRequest calls the generic PostViewsList builder with application/json body
func NewPostViewsListRequest(server string, body PostViewsListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostViewsListRequestWithBody(server, "application/json", bodyReader)
}

// NewPostViewsListRequestWithBody generates requests for PostViewsList with any type of body
func NewPostViewsListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/views.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAttachmentsCreateWithBodyWithResponse request with any body
	PostAttachmentsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAttachmentsCreateResponse, error)

	PostAttachmentsCreateWithResponse(ctx context.Context, body PostAttachmentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAttachmentsCreateResponse, error)

	// PostAttachmentsDeleteWithBodyWithResponse request with any body
	PostAttachmentsDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAttachmentsDeleteResponse, error)

	PostAttachmentsDeleteWithResponse(ctx context.Context, body PostAttachmentsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAttachmentsDeleteResponse, error)

	// PostAttachmentsRedirectWithBodyWithResponse request with any body
	PostAttachmentsRedirectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAttachmentsRedirectResponse, error)

	PostAttachmentsRedirectWithResponse(ctx context.Context, body PostAttachmentsRedirectJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAttachmentsRedirectResponse, error)

	// PostAuthConfigWithResponse request
	PostAuthConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAuthConfigResponse, error)

	// PostAuthInfoWithResponse request
	PostAuthInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAuthInfoResponse, error)

	// PostCollectionsAddGroupWithBodyWithResponse request with any body
	PostCollectionsAddGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsAddGroupResponse, error)

	PostCollectionsAddGroupWithResponse(ctx context.Context, body PostCollectionsAddGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsAddGroupResponse, error)

	// PostCollectionsAddUserWithBodyWithResponse request with any body
	PostCollectionsAddUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsAddUserResponse, error)

	PostCollectionsAddUserWithResponse(ctx context.Context, body PostCollectionsAddUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsAddUserResponse, error)

	// PostCollectionsCreateWithBodyWithResponse request with any body
	PostCollectionsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsCreateResponse, error)

	PostCollectionsCreateWithResponse(ctx context.Context, body PostCollectionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsCreateResponse, error)

	// PostCollectionsDeleteWithBodyWithResponse request with any body
	PostCollectionsDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsDeleteResponse, error)

	PostCollectionsDeleteWithResponse(ctx context.Context, body PostCollectionsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsDeleteResponse, error)

	// PostCollectionsDocumentsWithBodyWithResponse request with any body
	PostCollectionsDocumentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsDocumentsResponse, error)

	PostCollectionsDocumentsWithResponse(ctx context.Context, body PostCollectionsDocumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsDocumentsResponse, error)

	// PostCollectionsExportWithBodyWithResponse request with any body
	PostCollectionsExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsExportResponse, error)

	PostCollectionsExportWithResponse(ctx context.Context, body PostCollectionsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsExportResponse, error)

	// PostCollectionsExportAllWithBodyWithResponse request with any body
	PostCollectionsExportAllWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsExportAllResponse, error)

	PostCollectionsExportAllWithResponse(ctx context.Context, body PostCollectionsExportAllJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsExportAllResponse, error)

	// PostCollectionsGroupMembershipsWithBodyWithResponse request with any body
	PostCollectionsGroupMembershipsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsGroupMembershipsResponse, error)

	PostCollectionsGroupMembershipsWithResponse(ctx context.Context, body PostCollectionsGroupMembershipsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsGroupMembershipsResponse, error)

	// PostCollectionsInfoWithBodyWithResponse request with any body
	PostCollectionsInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsInfoResponse, error)

	PostCollectionsInfoWithResponse(ctx context.Context, body PostCollectionsInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsInfoResponse, error)

	// PostCollectionsListWithBodyWithResponse request with any body
	PostCollectionsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsListResponse, error)

	PostCollectionsListWithResponse(ctx context.Context, body PostCollectionsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsListResponse, error)

	// PostCollectionsMembershipsWithBodyWithResponse request with any body
	PostCollectionsMembershipsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsMembershipsResponse, error)

	PostCollectionsMembershipsWithResponse(ctx context.Context, body PostCollectionsMembershipsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsMembershipsResponse, error)

	// PostCollectionsRemoveGroupWithBodyWithResponse request with any body
	PostCollectionsRemoveGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsRemoveGroupResponse, error)

	PostCollectionsRemoveGroupWithResponse(ctx context.Context, body PostCollectionsRemoveGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsRemoveGroupResponse, error)

	// PostCollectionsRemoveUserWithBodyWithResponse request with any body
	PostCollectionsRemoveUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsRemoveUserResponse, error)

	PostCollectionsRemoveUserWithResponse(ctx context.Context, body PostCollectionsRemoveUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsRemoveUserResponse, error)

	// PostCollectionsUpdateWithBodyWithResponse request with any body
	PostCollectionsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsUpdateResponse, error)

	PostCollectionsUpdateWithResponse(ctx context.Context, body PostCollectionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsUpdateResponse, error)

	// PostCommentsCreateWithBodyWithResponse request with any body
	PostCommentsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCommentsCreateResponse, error)

	PostCommentsCreateWithResponse(ctx context.Context, body PostCommentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCommentsCreateResponse, error)

	// PostCommentsDeleteWithBodyWithResponse request with any body
	PostCommentsDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCommentsDeleteResponse, error)

	PostCommentsDeleteWithResponse(ctx context.Context, body PostCommentsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCommentsDeleteResponse, error)

	// PostCommentsListWithBodyWithResponse request with any body
	PostCommentsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCommentsListResponse, error)

	PostCommentsListWithResponse(ctx context.Context, body PostCommentsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCommentsListResponse, error)

	// PostCommentsUpdateWithBodyWithResponse request with any body
	PostCommentsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCommentsUpdateResponse, error)

	PostCommentsUpdateWithResponse(ctx context.Context, body PostCommentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCommentsUpdateResponse, error)

	// PostDocumentsAddUserWithBodyWithResponse request with any body
	PostDocumentsAddUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsAddUserResponse, error)

	PostDocumentsAddUserWithResponse(ctx context.Context, body PostDocumentsAddUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsAddUserResponse, error)

	// PostDocumentsArchiveWithBodyWithResponse request with any body
	PostDocumentsArchiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsArchiveResponse, error)

	PostDocumentsArchiveWithResponse(ctx context.Context, body PostDocumentsArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsArchiveResponse, error)

	// PostDocumentsCreateWithBodyWithResponse request with any body
	PostDocumentsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsCreateResponse, error)

	PostDocumentsCreateWithResponse(ctx context.Context, body PostDocumentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsCreateResponse, error)

	// PostDocumentsDeleteWithBodyWithResponse request with any body
	PostDocumentsDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsDeleteResponse, error)

	PostDocumentsDeleteWithResponse(ctx context.Context, body PostDocumentsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsDeleteResponse, error)

	// PostDocumentsDraftsWithBodyWithResponse request with any body
	PostDocumentsDraftsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsDraftsResponse, error)

	PostDocumentsDraftsWithResponse(ctx context.Context, body PostDocumentsDraftsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsDraftsResponse, error)

	// PostDocumentsExportWithBodyWithResponse request with any body
	PostDocumentsExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsExportResponse, error)

	PostDocumentsExportWithResponse(ctx context.Context, body PostDocumentsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsExportResponse, error)

	// PostDocumentsImportWithBodyWithResponse request with any body
	PostDocumentsImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsImportResponse, error)

	// PostDocumentsInfoWithBodyWithResponse request with any body
	PostDocumentsInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsInfoResponse, error)

	PostDocumentsInfoWithResponse(ctx context.Context, body PostDocumentsInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsInfoResponse, error)

	// PostDocumentsListWithBodyWithResponse request with any body
	PostDocumentsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsListResponse, error)

	PostDocumentsListWithResponse(ctx context.Context, body PostDocumentsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsListResponse, error)

	// PostDocumentsMembershipsWithBodyWithResponse request with any body
	PostDocumentsMembershipsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsMembershipsResponse, error)

	PostDocumentsMembershipsWithResponse(ctx context.Context, body PostDocumentsMembershipsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsMembershipsResponse, error)

	// PostDocumentsMoveWithBodyWithResponse request with any body
	PostDocumentsMoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsMoveResponse, error)

	PostDocumentsMoveWithResponse(ctx context.Context, body PostDocumentsMoveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsMoveResponse, error)

	// PostDocumentsRemoveUserWithBodyWithResponse request with any body
	PostDocumentsRemoveUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsRemoveUserResponse, error)

	PostDocumentsRemoveUserWithResponse(ctx context.Context, body PostDocumentsRemoveUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsRemoveUserResponse, error)

	// PostDocumentsRestoreWithBodyWithResponse request with any body
	PostDocumentsRestoreWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsRestoreResponse, error)

	PostDocumentsRestoreWithResponse(ctx context.Context, body PostDocumentsRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsRestoreResponse, error)

	// PostDocumentsSearchWithBodyWithResponse request with any body
	PostDocumentsSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsSearchResponse, error)

	PostDocumentsSearchWithResponse(ctx context.Context, body PostDocumentsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsSearchResponse, error)

	// PostDocumentsStarWithBodyWithResponse request with any body
	PostDocumentsStarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsStarResponse, error)

	PostDocumentsStarWithResponse(ctx context.Context, body PostDocumentsStarJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsStarResponse, error)

	// PostDocumentsTemplatizeWithBodyWithResponse request with any body
	PostDocumentsTemplatizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsTemplatizeResponse, error)

	PostDocumentsTemplatizeWithResponse(ctx context.Context, body PostDocumentsTemplatizeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsTemplatizeResponse, error)

	// PostDocumentsUnpublishWithBodyWithResponse request with any body
	PostDocumentsUnpublishWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsUnpublishResponse, error)

	PostDocumentsUnpublishWithResponse(ctx context.Context, body PostDocumentsUnpublishJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsUnpublishResponse, error)

	// PostDocumentsUnstarWithBodyWithResponse request with any body
	PostDocumentsUnstarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsUnstarResponse, error)

	PostDocumentsUnstarWithResponse(ctx context.Context, body PostDocumentsUnstarJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsUnstarResponse, error)

	// PostDocumentsUpdateWithBodyWithResponse request with any body
	PostDocumentsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsUpdateResponse, error)

	PostDocumentsUpdateWithResponse(ctx context.Context, body PostDocumentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsUpdateResponse, error)

	// PostDocumentsUsersWithBodyWithResponse request with any body
	PostDocumentsUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsUsersResponse, error)

	PostDocumentsUsersWithResponse(ctx context.Context, body PostDocumentsUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsUsersResponse, error)

	// PostDocumentsViewedWithBodyWithResponse request with any body
	PostDocumentsViewedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsViewedResponse, error)

	PostDocumentsViewedWithResponse(ctx context.Context, body PostDocumentsViewedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsViewedResponse, error)

	// PostEventsListWithBodyWithResponse request with any body
	PostEventsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEventsListResponse, error)

	PostEventsListWithResponse(ctx context.Context, body PostEventsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEventsListResponse, error)

	// PostFileOperationsDeleteWithBodyWithResponse request with any body
	PostFileOperationsDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFileOperationsDeleteResponse, error)

	PostFileOperationsDeleteWithResponse(ctx context.Context, body PostFileOperationsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFileOperationsDeleteResponse, error)

	// PostFileOperationsInfoWithBodyWithResponse request with any body
	PostFileOperationsInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFileOperationsInfoResponse, error)

	PostFileOperationsInfoWithResponse(ctx context.Context, body PostFileOperationsInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFileOperationsInfoResponse, error)

	// PostFileOperationsListWithBodyWithResponse request with any body
	PostFileOperationsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFileOperationsListResponse, error)

	PostFileOperationsListWithResponse(ctx context.Context, body PostFileOperationsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFileOperationsListResponse, error)

	// PostFileOperationsRedirectWithBodyWithResponse request with any body
	PostFileOperationsRedirectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFileOperationsRedirectResponse, error)

	PostFileOperationsRedirectWithResponse(ctx context.Context, body PostFileOperationsRedirectJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFileOperationsRedirectResponse, error)

	// PostGroupsAddUserWithBodyWithResponse request with any body
	PostGroupsAddUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsAddUserResponse, error)

	PostGroupsAddUserWithResponse(ctx context.Context, body PostGroupsAddUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsAddUserResponse, error)

	// PostGroupsCreateWithBodyWithResponse request with any body
	PostGroupsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsCreateResponse, error)

	PostGroupsCreateWithResponse(ctx context.Context, body PostGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsCreateResponse, error)

	// PostGroupsDeleteWithBodyWithResponse request with any body
	PostGroupsDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsDeleteResponse, error)

	PostGroupsDeleteWithResponse(ctx context.Context, body PostGroupsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsDeleteResponse, error)

	// PostGroupsInfoWithBodyWithResponse request with any body
	PostGroupsInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsInfoResponse, error)

	PostGroupsInfoWithResponse(ctx context.Context, body PostGroupsInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsInfoResponse, error)

	// PostGroupsListWithBodyWithResponse request with any body
	PostGroupsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsListResponse, error)

	PostGroupsListWithResponse(ctx context.Context, body PostGroupsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsListResponse, error)

	// PostGroupsMembershipsWithBodyWithResponse request with any body
	PostGroupsMembershipsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsMembershipsResponse, error)

	PostGroupsMembershipsWithResponse(ctx context.Context, body PostGroupsMembershipsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsMembershipsResponse, error)

	// PostGroupsRemoveUserWithBodyWithResponse request with any body
	PostGroupsRemoveUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsRemoveUserResponse, error)

	PostGroupsRemoveUserWithResponse(ctx context.Context, body PostGroupsRemoveUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsRemoveUserResponse, error)

	// PostGroupsUpdateWithBodyWithResponse request with any body
	PostGroupsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsUpdateResponse, error)

	PostGroupsUpdateWithResponse(ctx context.Context, body PostGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsUpdateResponse, error)

	// PostRevisionsInfoWithBodyWithResponse request with any body
	PostRevisionsInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRevisionsInfoResponse, error)

	PostRevisionsInfoWithResponse(ctx context.Context, body PostRevisionsInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRevisionsInfoResponse, error)

	// PostRevisionsListWithBodyWithResponse request with any body
	PostRevisionsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRevisionsListResponse, error)

	PostRevisionsListWithResponse(ctx context.Context, body PostRevisionsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRevisionsListResponse, error)

	// PostSharesCreateWithBodyWithResponse request with any body
	PostSharesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSharesCreateResponse, error)

	PostSharesCreateWithResponse(ctx context.Context, body PostSharesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSharesCreateResponse, error)

	// PostSharesInfoWithBodyWithResponse request with any body
	PostSharesInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSharesInfoResponse, error)

	PostSharesInfoWithResponse(ctx context.Context, body PostSharesInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSharesInfoResponse, error)

	// PostSharesListWithBodyWithResponse request with any body
	PostSharesListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSharesListResponse, error)

	PostSharesListWithResponse(ctx context.Context, body PostSharesListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSharesListResponse, error)

	// PostSharesRevokeWithBodyWithResponse request with any body
	PostSharesRevokeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSharesRevokeResponse, error)

	PostSharesRevokeWithResponse(ctx context.Context, body PostSharesRevokeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSharesRevokeResponse, error)

	// PostSharesUpdateWithBodyWithResponse request with any body
	PostSharesUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSharesUpdateResponse, error)

	PostSharesUpdateWithResponse(ctx context.Context, body PostSharesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSharesUpdateResponse, error)

	// PostUsersActivateWithBodyWithResponse request with any body
	PostUsersActivateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersActivateResponse, error)

	PostUsersActivateWithResponse(ctx context.Context, body PostUsersActivateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersActivateResponse, error)

	// PostUsersDeleteWithBodyWithResponse request with any body
	PostUsersDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersDeleteResponse, error)

	PostUsersDeleteWithResponse(ctx context.Context, body PostUsersDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersDeleteResponse, error)

	// PostUsersInfoWithBodyWithResponse request with any body
	PostUsersInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersInfoResponse, error)

	PostUsersInfoWithResponse(ctx context.Context, body PostUsersInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersInfoResponse, error)

	// PostUsersInviteWithBodyWithResponse request with any body
	PostUsersInviteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersInviteResponse, error)

	PostUsersInviteWithResponse(ctx context.Context, body PostUsersInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersInviteResponse, error)

	// PostUsersListWithBodyWithResponse request with any body
	PostUsersListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersListResponse, error)

	PostUsersListWithResponse(ctx context.Context, body PostUsersListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersListResponse, error)

	// PostUsersSuspendWithBodyWithResponse request with any body
	PostUsersSuspendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersSuspendResponse, error)

	PostUsersSuspendWithResponse(ctx context.Context, body PostUsersSuspendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersSuspendResponse, error)

	// PostUsersUpdateWithBodyWithResponse request with any body
	PostUsersUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersUpdateResponse, error)

	PostUsersUpdateWithResponse(ctx context.Context, body PostUsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersUpdateResponse, error)

	// PostUsersUpdateRoleWithBodyWithResponse request with any body
	PostUsersUpdateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersUpdateRoleResponse, error)

	PostUsersUpdateRoleWithResponse(ctx context.Context, body PostUsersUpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersUpdateRoleResponse, error)

	// PostViewsCreateWithBodyWithResponse request with any body
	PostViewsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostViewsCreateResponse, error)

	PostViewsCreateWithResponse(ctx context.Context, body PostViewsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostViewsCreateResponse, error)

	// PostViewsListWithBodyWithResponse request with any body
	PostViewsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostViewsListResponse, error)

	PostViewsListWithResponse(ctx context.Context, body PostViewsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostViewsListResponse, error)
}

type PostAttachmentsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Attachment    *Attachment             `json:"attachment,omitempty"`
			Form          *map[string]interface{} `json:"form,omitempty"`
			MaxUploadSize *float32                `json:"maxUploadSize,omitempty"`
			UploadUrl     *string                 `json:"uploadUrl,omitempty"`
		} `json:"data,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostAttachmentsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAttachmentsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAttachmentsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostAttachmentsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAttachmentsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAttachmentsRedirectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAttachmentsRedirectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAttachmentsRedirectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Hostname *string `json:"hostname,omitempty"`
			Name     *string `json:"name,omitempty"`
			Services *[]struct {
				AuthUrl *string `json:"authUrl,omitempty"`
				Id      *string `json:"id,omitempty"`
				Name    *string `json:"name,omitempty"`
			} `json:"services,omitempty"`
		} `json:"data,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostAuthConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *Auth `json:"data,omitempty"`
	}
	JSON401 *Unauthenticated
}

// Status returns HTTPResponse.Status
func (r PostAuthInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCollectionsAddGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			CollectionGroupMemberships *[]CollectionGroupMembership `json:"collectionGroupMemberships,omitempty"`
		} `json:"data,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostCollectionsAddGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCollectionsAddGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCollectionsAddUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Memberships *[]Membership `json:"memberships,omitempty"`
			Users       *[]User       `json:"users,omitempty"`
		} `json:"data,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostCollectionsAddUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCollectionsAddUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCollectionsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     *Collection `json:"data,omitempty"`
		Policies *[]Policy   `json:"policies,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostCollectionsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCollectionsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCollectionsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success *bool `json:"success,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostCollectionsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCollectionsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCollectionsDocumentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]NavigationNode `json:"data,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostCollectionsDocumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCollectionsDocumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCollectionsExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			FileOperation *FileOperation `json:"fileOperation,omitempty"`
		} `json:"data,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostCollectionsExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCollectionsExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCollectionsExportAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			FileOperation *FileOperation `json:"fileOperation,omitempty"`
		} `json:"data,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostCollectionsExportAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCollectionsExportAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCollectionsGroupMembershipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			CollectionGroupMemberships *[]CollectionGroupMembership `json:"collectionGroupMemberships,omitempty"`
			Groups                     *[]Group                     `json:"groups,omitempty"`
		} `json:"data,omitempty"`
		Pagination *Pagination `json:"pagination,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostCollectionsGroupMembershipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCollectionsGroupMembershipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCollectionsInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *Collection `json:"data,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostCollectionsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCollectionsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCollectionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]Collection `json:"data,omitempty"`
		Pagination *Pagination   `json:"pagination,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostCollectionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCollectionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCollectionsMembershipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Memberships *[]Membership `json:"memberships,omitempty"`
			Users       *[]User       `json:"users,omitempty"`
		} `json:"data,omitempty"`
		Pagination *Pagination `json:"pagination,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostCollectionsMembershipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCollectionsMembershipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCollectionsRemoveGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostCollectionsRemoveGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCollectionsRemoveGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCollectionsRemoveUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostCollectionsRemoveUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCollectionsRemoveUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCollectionsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     *Collection `json:"data,omitempty"`
		Policies *[]Policy   `json:"policies,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostCollectionsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCollectionsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCommentsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *Comment `json:"data,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostCommentsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCommentsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCommentsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success *bool `json:"success,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostCommentsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCommentsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCommentsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]Document `json:"data,omitempty"`
		Pagination *Pagination `json:"pagination,omitempty"`
		Policies   *[]Policy   `json:"policies,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostCommentsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCommentsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCommentsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *Comment `json:"data,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostCommentsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCommentsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDocumentsAddUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Memberships *[]Membership `json:"memberships,omitempty"`
			Users       *[]User       `json:"users,omitempty"`
		} `json:"data,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostDocumentsAddUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDocumentsAddUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDocumentsArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     *Document `json:"data,omitempty"`
		Policies *[]Policy `json:"policies,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostDocumentsArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDocumentsArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDocumentsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     *Document `json:"data,omitempty"`
		Policies *[]Policy `json:"policies,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostDocumentsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDocumentsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDocumentsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostDocumentsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDocumentsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDocumentsDraftsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]Document `json:"data,omitempty"`
		Pagination *Pagination `json:"pagination,omitempty"`
		Policies   *[]Policy   `json:"policies,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostDocumentsDraftsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDocumentsDraftsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDocumentsExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data The document content in Markdown formatting
		Data *string `json:"data,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostDocumentsExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDocumentsExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDocumentsImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *Document `json:"data,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostDocumentsImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDocumentsImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDocumentsInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *Document `json:"data,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostDocumentsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDocumentsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDocumentsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]Document `json:"data,omitempty"`
		Pagination *Pagination `json:"pagination,omitempty"`
		Policies   *[]Policy   `json:"policies,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostDocumentsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDocumentsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDocumentsMembershipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Memberships *[]Membership `json:"memberships,omitempty"`
			Users       *[]User       `json:"users,omitempty"`
		} `json:"data,omitempty"`
		Pagination *Pagination `json:"pagination,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostDocumentsMembershipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDocumentsMembershipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDocumentsMoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Collections *[]Collection `json:"collections,omitempty"`
			Documents   *[]Document   `json:"documents,omitempty"`
		} `json:"data,omitempty"`
		Policies *[]Policy `json:"policies,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostDocumentsMoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDocumentsMoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDocumentsRemoveUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostDocumentsRemoveUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDocumentsRemoveUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDocumentsRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     *Document `json:"data,omitempty"`
		Policies *[]Policy `json:"policies,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostDocumentsRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDocumentsRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDocumentsSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]struct {
			// Context A short snippet of context from the document that includes the search query.
			Context  *string   `json:"context,omitempty"`
			Document *Document `json:"document,omitempty"`

			// Ranking The ranking used to order search results based on relevance.
			Ranking *float32 `json:"ranking,omitempty"`
		} `json:"data,omitempty"`
		Pagination *Pagination `json:"pagination,omitempty"`
		Policies   *[]Policy   `json:"policies,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostDocumentsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDocumentsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDocumentsStarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostDocumentsStarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDocumentsStarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDocumentsTemplatizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     *Document `json:"data,omitempty"`
		Policies *[]Policy `json:"policies,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostDocumentsTemplatizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDocumentsTemplatizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDocumentsUnpublishResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     *Document `json:"data,omitempty"`
		Policies *[]Policy `json:"policies,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostDocumentsUnpublishResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDocumentsUnpublishResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDocumentsUnstarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostDocumentsUnstarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDocumentsUnstarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDocumentsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     *Document `json:"data,omitempty"`
		Policies *[]Policy `json:"policies,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostDocumentsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDocumentsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDocumentsUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]User     `json:"data,omitempty"`
		Pagination *Pagination `json:"pagination,omitempty"`
		Policies   *[]Policy   `json:"policies,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostDocumentsUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDocumentsUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDocumentsViewedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]Document `json:"data,omitempty"`
		Pagination *Pagination `json:"pagination,omitempty"`
		Policies   *[]Policy   `json:"policies,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostDocumentsViewedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDocumentsViewedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEventsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]Event    `json:"data,omitempty"`
		Pagination *Pagination `json:"pagination,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostEventsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEventsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFileOperationsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success *bool `json:"success,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostFileOperationsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFileOperationsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFileOperationsInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *FileOperation `json:"data,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostFileOperationsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFileOperationsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFileOperationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]FileOperation `json:"data,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostFileOperationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFileOperationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFileOperationsRedirectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r PostFileOperationsRedirectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFileOperationsRedirectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGroupsAddUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			GroupMemberships *[]Membership `json:"groupMemberships,omitempty"`
			Groups           *[]Group      `json:"groups,omitempty"`
			Users            *[]User       `json:"users,omitempty"`
		} `json:"data,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostGroupsAddUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGroupsAddUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGroupsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     *Group    `json:"data,omitempty"`
		Policies *[]Policy `json:"policies,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostGroupsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGroupsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGroupsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostGroupsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGroupsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGroupsInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *Group `json:"data,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostGroupsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGroupsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGroupsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			// GroupMemberships A preview of memberships in the group, note that this is not all memberships which can be queried from `groups.memberships`.
			GroupMemberships *[]GroupMembership `json:"groupMemberships,omitempty"`
			Groups           *[]Group           `json:"groups,omitempty"`
		} `json:"data,omitempty"`
		Pagination *Pagination `json:"pagination,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostGroupsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGroupsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGroupsMembershipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			GroupMemberships *[]GroupMembership `json:"groupMemberships,omitempty"`
			Users            *[]User            `json:"users,omitempty"`
		} `json:"data,omitempty"`
		Pagination *Pagination `json:"pagination,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostGroupsMembershipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGroupsMembershipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGroupsRemoveUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Groups *[]Group `json:"groups,omitempty"`
		} `json:"data,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostGroupsRemoveUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGroupsRemoveUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGroupsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     *Group    `json:"data,omitempty"`
		Policies *[]Policy `json:"policies,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostGroupsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGroupsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRevisionsInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *Revision `json:"data,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostRevisionsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRevisionsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRevisionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]Revision `json:"data,omitempty"`
		Pagination *Pagination `json:"pagination,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostRevisionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRevisionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSharesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *Share `json:"data,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostSharesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSharesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSharesInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *Share `json:"data,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostSharesInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSharesInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSharesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]Share    `json:"data,omitempty"`
		Pagination *Pagination `json:"pagination,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostSharesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSharesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSharesRevokeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostSharesRevokeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSharesRevokeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSharesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *Share `json:"data,omitempty"`
	}
	JSON400 *Validation
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostSharesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSharesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersActivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *User `json:"data,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostUsersActivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersActivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success *bool `json:"success,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostUsersDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *User `json:"data,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostUsersInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Sent  *[]Invite `json:"sent,omitempty"`
		Users *[]User   `json:"users,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostUsersInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]User     `json:"data,omitempty"`
		Pagination *Pagination `json:"pagination,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostUsersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersSuspendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *User `json:"data,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostUsersSuspendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersSuspendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *User `json:"data,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostUsersUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersUpdateRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *User `json:"data,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r PostUsersUpdateRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersUpdateRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostViewsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *View `json:"data,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostViewsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostViewsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostViewsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]View `json:"data,omitempty"`
	}
	JSON401 *Unauthenticated
	JSON403 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostViewsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostViewsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAttachmentsCreateWithBodyWithResponse request with arbitrary body returning *PostAttachmentsCreateResponse
func (c *ClientWithResponses) PostAttachmentsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAttachmentsCreateResponse, error) {
	rsp, err := c.PostAttachmentsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAttachmentsCreateResponse(rsp)
}

func (c *ClientWithResponses) PostAttachmentsCreateWithResponse(ctx context.Context, body PostAttachmentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAttachmentsCreateResponse, error) {
	rsp, err := c.PostAttachmentsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAttachmentsCreateResponse(rsp)
}

// PostAttachmentsDeleteWithBodyWithResponse request with arbitrary body returning *PostAttachmentsDeleteResponse
func (c *ClientWithResponses) PostAttachmentsDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAttachmentsDeleteResponse, error) {
	rsp, err := c.PostAttachmentsDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAttachmentsDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostAttachmentsDeleteWithResponse(ctx context.Context, body PostAttachmentsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAttachmentsDeleteResponse, error) {
	rsp, err := c.PostAttachmentsDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAttachmentsDeleteResponse(rsp)
}

// PostAttachmentsRedirectWithBodyWithResponse request with arbitrary body returning *PostAttachmentsRedirectResponse
func (c *ClientWithResponses) PostAttachmentsRedirectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAttachmentsRedirectResponse, error) {
	rsp, err := c.PostAttachmentsRedirectWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAttachmentsRedirectResponse(rsp)
}

func (c *ClientWithResponses) PostAttachmentsRedirectWithResponse(ctx context.Context, body PostAttachmentsRedirectJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAttachmentsRedirectResponse, error) {
	rsp, err := c.PostAttachmentsRedirect(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAttachmentsRedirectResponse(rsp)
}

// PostAuthConfigWithResponse request returning *PostAuthConfigResponse
func (c *ClientWithResponses) PostAuthConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAuthConfigResponse, error) {
	rsp, err := c.PostAuthConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthConfigResponse(rsp)
}

// PostAuthInfoWithResponse request returning *PostAuthInfoResponse
func (c *ClientWithResponses) PostAuthInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAuthInfoResponse, error) {
	rsp, err := c.PostAuthInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthInfoResponse(rsp)
}

// PostCollectionsAddGroupWithBodyWithResponse request with arbitrary body returning *PostCollectionsAddGroupResponse
func (c *ClientWithResponses) PostCollectionsAddGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsAddGroupResponse, error) {
	rsp, err := c.PostCollectionsAddGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsAddGroupResponse(rsp)
}

func (c *ClientWithResponses) PostCollectionsAddGroupWithResponse(ctx context.Context, body PostCollectionsAddGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsAddGroupResponse, error) {
	rsp, err := c.PostCollectionsAddGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsAddGroupResponse(rsp)
}

// PostCollectionsAddUserWithBodyWithResponse request with arbitrary body returning *PostCollectionsAddUserResponse
func (c *ClientWithResponses) PostCollectionsAddUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsAddUserResponse, error) {
	rsp, err := c.PostCollectionsAddUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsAddUserResponse(rsp)
}

func (c *ClientWithResponses) PostCollectionsAddUserWithResponse(ctx context.Context, body PostCollectionsAddUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsAddUserResponse, error) {
	rsp, err := c.PostCollectionsAddUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsAddUserResponse(rsp)
}

// PostCollectionsCreateWithBodyWithResponse request with arbitrary body returning *PostCollectionsCreateResponse
func (c *ClientWithResponses) PostCollectionsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsCreateResponse, error) {
	rsp, err := c.PostCollectionsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsCreateResponse(rsp)
}

func (c *ClientWithResponses) PostCollectionsCreateWithResponse(ctx context.Context, body PostCollectionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsCreateResponse, error) {
	rsp, err := c.PostCollectionsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsCreateResponse(rsp)
}

// PostCollectionsDeleteWithBodyWithResponse request with arbitrary body returning *PostCollectionsDeleteResponse
func (c *ClientWithResponses) PostCollectionsDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsDeleteResponse, error) {
	rsp, err := c.PostCollectionsDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostCollectionsDeleteWithResponse(ctx context.Context, body PostCollectionsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsDeleteResponse, error) {
	rsp, err := c.PostCollectionsDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsDeleteResponse(rsp)
}

// PostCollectionsDocumentsWithBodyWithResponse request with arbitrary body returning *PostCollectionsDocumentsResponse
func (c *ClientWithResponses) PostCollectionsDocumentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsDocumentsResponse, error) {
	rsp, err := c.PostCollectionsDocumentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsDocumentsResponse(rsp)
}

func (c *ClientWithResponses) PostCollectionsDocumentsWithResponse(ctx context.Context, body PostCollectionsDocumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsDocumentsResponse, error) {
	rsp, err := c.PostCollectionsDocuments(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsDocumentsResponse(rsp)
}

// PostCollectionsExportWithBodyWithResponse request with arbitrary body returning *PostCollectionsExportResponse
func (c *ClientWithResponses) PostCollectionsExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsExportResponse, error) {
	rsp, err := c.PostCollectionsExportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsExportResponse(rsp)
}

func (c *ClientWithResponses) PostCollectionsExportWithResponse(ctx context.Context, body PostCollectionsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsExportResponse, error) {
	rsp, err := c.PostCollectionsExport(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsExportResponse(rsp)
}

// PostCollectionsExportAllWithBodyWithResponse request with arbitrary body returning *PostCollectionsExportAllResponse
func (c *ClientWithResponses) PostCollectionsExportAllWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsExportAllResponse, error) {
	rsp, err := c.PostCollectionsExportAllWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsExportAllResponse(rsp)
}

func (c *ClientWithResponses) PostCollectionsExportAllWithResponse(ctx context.Context, body PostCollectionsExportAllJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsExportAllResponse, error) {
	rsp, err := c.PostCollectionsExportAll(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsExportAllResponse(rsp)
}

// PostCollectionsGroupMembershipsWithBodyWithResponse request with arbitrary body returning *PostCollectionsGroupMembershipsResponse
func (c *ClientWithResponses) PostCollectionsGroupMembershipsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsGroupMembershipsResponse, error) {
	rsp, err := c.PostCollectionsGroupMembershipsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsGroupMembershipsResponse(rsp)
}

func (c *ClientWithResponses) PostCollectionsGroupMembershipsWithResponse(ctx context.Context, body PostCollectionsGroupMembershipsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsGroupMembershipsResponse, error) {
	rsp, err := c.PostCollectionsGroupMemberships(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsGroupMembershipsResponse(rsp)
}

// PostCollectionsInfoWithBodyWithResponse request with arbitrary body returning *PostCollectionsInfoResponse
func (c *ClientWithResponses) PostCollectionsInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsInfoResponse, error) {
	rsp, err := c.PostCollectionsInfoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsInfoResponse(rsp)
}

func (c *ClientWithResponses) PostCollectionsInfoWithResponse(ctx context.Context, body PostCollectionsInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsInfoResponse, error) {
	rsp, err := c.PostCollectionsInfo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsInfoResponse(rsp)
}

// PostCollectionsListWithBodyWithResponse request with arbitrary body returning *PostCollectionsListResponse
func (c *ClientWithResponses) PostCollectionsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsListResponse, error) {
	rsp, err := c.PostCollectionsListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsListResponse(rsp)
}

func (c *ClientWithResponses) PostCollectionsListWithResponse(ctx context.Context, body PostCollectionsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsListResponse, error) {
	rsp, err := c.PostCollectionsList(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsListResponse(rsp)
}

// PostCollectionsMembershipsWithBodyWithResponse request with arbitrary body returning *PostCollectionsMembershipsResponse
func (c *ClientWithResponses) PostCollectionsMembershipsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsMembershipsResponse, error) {
	rsp, err := c.PostCollectionsMembershipsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsMembershipsResponse(rsp)
}

func (c *ClientWithResponses) PostCollectionsMembershipsWithResponse(ctx context.Context, body PostCollectionsMembershipsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsMembershipsResponse, error) {
	rsp, err := c.PostCollectionsMemberships(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsMembershipsResponse(rsp)
}

// PostCollectionsRemoveGroupWithBodyWithResponse request with arbitrary body returning *PostCollectionsRemoveGroupResponse
func (c *ClientWithResponses) PostCollectionsRemoveGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsRemoveGroupResponse, error) {
	rsp, err := c.PostCollectionsRemoveGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsRemoveGroupResponse(rsp)
}

func (c *ClientWithResponses) PostCollectionsRemoveGroupWithResponse(ctx context.Context, body PostCollectionsRemoveGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsRemoveGroupResponse, error) {
	rsp, err := c.PostCollectionsRemoveGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsRemoveGroupResponse(rsp)
}

// PostCollectionsRemoveUserWithBodyWithResponse request with arbitrary body returning *PostCollectionsRemoveUserResponse
func (c *ClientWithResponses) PostCollectionsRemoveUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsRemoveUserResponse, error) {
	rsp, err := c.PostCollectionsRemoveUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsRemoveUserResponse(rsp)
}

func (c *ClientWithResponses) PostCollectionsRemoveUserWithResponse(ctx context.Context, body PostCollectionsRemoveUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsRemoveUserResponse, error) {
	rsp, err := c.PostCollectionsRemoveUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsRemoveUserResponse(rsp)
}

// PostCollectionsUpdateWithBodyWithResponse request with arbitrary body returning *PostCollectionsUpdateResponse
func (c *ClientWithResponses) PostCollectionsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsUpdateResponse, error) {
	rsp, err := c.PostCollectionsUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostCollectionsUpdateWithResponse(ctx context.Context, body PostCollectionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsUpdateResponse, error) {
	rsp, err := c.PostCollectionsUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsUpdateResponse(rsp)
}

// PostCommentsCreateWithBodyWithResponse request with arbitrary body returning *PostCommentsCreateResponse
func (c *ClientWithResponses) PostCommentsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCommentsCreateResponse, error) {
	rsp, err := c.PostCommentsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCommentsCreateResponse(rsp)
}

func (c *ClientWithResponses) PostCommentsCreateWithResponse(ctx context.Context, body PostCommentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCommentsCreateResponse, error) {
	rsp, err := c.PostCommentsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCommentsCreateResponse(rsp)
}

// PostCommentsDeleteWithBodyWithResponse request with arbitrary body returning *PostCommentsDeleteResponse
func (c *ClientWithResponses) PostCommentsDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCommentsDeleteResponse, error) {
	rsp, err := c.PostCommentsDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCommentsDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostCommentsDeleteWithResponse(ctx context.Context, body PostCommentsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCommentsDeleteResponse, error) {
	rsp, err := c.PostCommentsDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCommentsDeleteResponse(rsp)
}

// PostCommentsListWithBodyWithResponse request with arbitrary body returning *PostCommentsListResponse
func (c *ClientWithResponses) PostCommentsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCommentsListResponse, error) {
	rsp, err := c.PostCommentsListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCommentsListResponse(rsp)
}

func (c *ClientWithResponses) PostCommentsListWithResponse(ctx context.Context, body PostCommentsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCommentsListResponse, error) {
	rsp, err := c.PostCommentsList(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCommentsListResponse(rsp)
}

// PostCommentsUpdateWithBodyWithResponse request with arbitrary body returning *PostCommentsUpdateResponse
func (c *ClientWithResponses) PostCommentsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCommentsUpdateResponse, error) {
	rsp, err := c.PostCommentsUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCommentsUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostCommentsUpdateWithResponse(ctx context.Context, body PostCommentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCommentsUpdateResponse, error) {
	rsp, err := c.PostCommentsUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCommentsUpdateResponse(rsp)
}

// PostDocumentsAddUserWithBodyWithResponse request with arbitrary body returning *PostDocumentsAddUserResponse
func (c *ClientWithResponses) PostDocumentsAddUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsAddUserResponse, error) {
	rsp, err := c.PostDocumentsAddUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsAddUserResponse(rsp)
}

func (c *ClientWithResponses) PostDocumentsAddUserWithResponse(ctx context.Context, body PostDocumentsAddUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsAddUserResponse, error) {
	rsp, err := c.PostDocumentsAddUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsAddUserResponse(rsp)
}

// PostDocumentsArchiveWithBodyWithResponse request with arbitrary body returning *PostDocumentsArchiveResponse
func (c *ClientWithResponses) PostDocumentsArchiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsArchiveResponse, error) {
	rsp, err := c.PostDocumentsArchiveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsArchiveResponse(rsp)
}

func (c *ClientWithResponses) PostDocumentsArchiveWithResponse(ctx context.Context, body PostDocumentsArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsArchiveResponse, error) {
	rsp, err := c.PostDocumentsArchive(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsArchiveResponse(rsp)
}

// PostDocumentsCreateWithBodyWithResponse request with arbitrary body returning *PostDocumentsCreateResponse
func (c *ClientWithResponses) PostDocumentsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsCreateResponse, error) {
	rsp, err := c.PostDocumentsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsCreateResponse(rsp)
}

func (c *ClientWithResponses) PostDocumentsCreateWithResponse(ctx context.Context, body PostDocumentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsCreateResponse, error) {
	rsp, err := c.PostDocumentsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsCreateResponse(rsp)
}

// PostDocumentsDeleteWithBodyWithResponse request with arbitrary body returning *PostDocumentsDeleteResponse
func (c *ClientWithResponses) PostDocumentsDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsDeleteResponse, error) {
	rsp, err := c.PostDocumentsDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostDocumentsDeleteWithResponse(ctx context.Context, body PostDocumentsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsDeleteResponse, error) {
	rsp, err := c.PostDocumentsDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsDeleteResponse(rsp)
}

// PostDocumentsDraftsWithBodyWithResponse request with arbitrary body returning *PostDocumentsDraftsResponse
func (c *ClientWithResponses) PostDocumentsDraftsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsDraftsResponse, error) {
	rsp, err := c.PostDocumentsDraftsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsDraftsResponse(rsp)
}

func (c *ClientWithResponses) PostDocumentsDraftsWithResponse(ctx context.Context, body PostDocumentsDraftsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsDraftsResponse, error) {
	rsp, err := c.PostDocumentsDrafts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsDraftsResponse(rsp)
}

// PostDocumentsExportWithBodyWithResponse request with arbitrary body returning *PostDocumentsExportResponse
func (c *ClientWithResponses) PostDocumentsExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsExportResponse, error) {
	rsp, err := c.PostDocumentsExportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsExportResponse(rsp)
}

func (c *ClientWithResponses) PostDocumentsExportWithResponse(ctx context.Context, body PostDocumentsExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsExportResponse, error) {
	rsp, err := c.PostDocumentsExport(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsExportResponse(rsp)
}

// PostDocumentsImportWithBodyWithResponse request with arbitrary body returning *PostDocumentsImportResponse
func (c *ClientWithResponses) PostDocumentsImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsImportResponse, error) {
	rsp, err := c.PostDocumentsImportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsImportResponse(rsp)
}

// PostDocumentsInfoWithBodyWithResponse request with arbitrary body returning *PostDocumentsInfoResponse
func (c *ClientWithResponses) PostDocumentsInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsInfoResponse, error) {
	rsp, err := c.PostDocumentsInfoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsInfoResponse(rsp)
}

func (c *ClientWithResponses) PostDocumentsInfoWithResponse(ctx context.Context, body PostDocumentsInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsInfoResponse, error) {
	rsp, err := c.PostDocumentsInfo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsInfoResponse(rsp)
}

// PostDocumentsListWithBodyWithResponse request with arbitrary body returning *PostDocumentsListResponse
func (c *ClientWithResponses) PostDocumentsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsListResponse, error) {
	rsp, err := c.PostDocumentsListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsListResponse(rsp)
}

func (c *ClientWithResponses) PostDocumentsListWithResponse(ctx context.Context, body PostDocumentsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsListResponse, error) {
	rsp, err := c.PostDocumentsList(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsListResponse(rsp)
}

// PostDocumentsMembershipsWithBodyWithResponse request with arbitrary body returning *PostDocumentsMembershipsResponse
func (c *ClientWithResponses) PostDocumentsMembershipsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsMembershipsResponse, error) {
	rsp, err := c.PostDocumentsMembershipsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsMembershipsResponse(rsp)
}

func (c *ClientWithResponses) PostDocumentsMembershipsWithResponse(ctx context.Context, body PostDocumentsMembershipsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsMembershipsResponse, error) {
	rsp, err := c.PostDocumentsMemberships(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsMembershipsResponse(rsp)
}

// PostDocumentsMoveWithBodyWithResponse request with arbitrary body returning *PostDocumentsMoveResponse
func (c *ClientWithResponses) PostDocumentsMoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsMoveResponse, error) {
	rsp, err := c.PostDocumentsMoveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsMoveResponse(rsp)
}

func (c *ClientWithResponses) PostDocumentsMoveWithResponse(ctx context.Context, body PostDocumentsMoveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsMoveResponse, error) {
	rsp, err := c.PostDocumentsMove(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsMoveResponse(rsp)
}

// PostDocumentsRemoveUserWithBodyWithResponse request with arbitrary body returning *PostDocumentsRemoveUserResponse
func (c *ClientWithResponses) PostDocumentsRemoveUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsRemoveUserResponse, error) {
	rsp, err := c.PostDocumentsRemoveUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsRemoveUserResponse(rsp)
}

func (c *ClientWithResponses) PostDocumentsRemoveUserWithResponse(ctx context.Context, body PostDocumentsRemoveUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsRemoveUserResponse, error) {
	rsp, err := c.PostDocumentsRemoveUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsRemoveUserResponse(rsp)
}

// PostDocumentsRestoreWithBodyWithResponse request with arbitrary body returning *PostDocumentsRestoreResponse
func (c *ClientWithResponses) PostDocumentsRestoreWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsRestoreResponse, error) {
	rsp, err := c.PostDocumentsRestoreWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsRestoreResponse(rsp)
}

func (c *ClientWithResponses) PostDocumentsRestoreWithResponse(ctx context.Context, body PostDocumentsRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsRestoreResponse, error) {
	rsp, err := c.PostDocumentsRestore(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsRestoreResponse(rsp)
}

// PostDocumentsSearchWithBodyWithResponse request with arbitrary body returning *PostDocumentsSearchResponse
func (c *ClientWithResponses) PostDocumentsSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsSearchResponse, error) {
	rsp, err := c.PostDocumentsSearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsSearchResponse(rsp)
}

func (c *ClientWithResponses) PostDocumentsSearchWithResponse(ctx context.Context, body PostDocumentsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsSearchResponse, error) {
	rsp, err := c.PostDocumentsSearch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsSearchResponse(rsp)
}

// PostDocumentsStarWithBodyWithResponse request with arbitrary body returning *PostDocumentsStarResponse
func (c *ClientWithResponses) PostDocumentsStarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsStarResponse, error) {
	rsp, err := c.PostDocumentsStarWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsStarResponse(rsp)
}

func (c *ClientWithResponses) PostDocumentsStarWithResponse(ctx context.Context, body PostDocumentsStarJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsStarResponse, error) {
	rsp, err := c.PostDocumentsStar(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsStarResponse(rsp)
}

// PostDocumentsTemplatizeWithBodyWithResponse request with arbitrary body returning *PostDocumentsTemplatizeResponse
func (c *ClientWithResponses) PostDocumentsTemplatizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsTemplatizeResponse, error) {
	rsp, err := c.PostDocumentsTemplatizeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsTemplatizeResponse(rsp)
}

func (c *ClientWithResponses) PostDocumentsTemplatizeWithResponse(ctx context.Context, body PostDocumentsTemplatizeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsTemplatizeResponse, error) {
	rsp, err := c.PostDocumentsTemplatize(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsTemplatizeResponse(rsp)
}

// PostDocumentsUnpublishWithBodyWithResponse request with arbitrary body returning *PostDocumentsUnpublishResponse
func (c *ClientWithResponses) PostDocumentsUnpublishWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsUnpublishResponse, error) {
	rsp, err := c.PostDocumentsUnpublishWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsUnpublishResponse(rsp)
}

func (c *ClientWithResponses) PostDocumentsUnpublishWithResponse(ctx context.Context, body PostDocumentsUnpublishJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsUnpublishResponse, error) {
	rsp, err := c.PostDocumentsUnpublish(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsUnpublishResponse(rsp)
}

// PostDocumentsUnstarWithBodyWithResponse request with arbitrary body returning *PostDocumentsUnstarResponse
func (c *ClientWithResponses) PostDocumentsUnstarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsUnstarResponse, error) {
	rsp, err := c.PostDocumentsUnstarWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsUnstarResponse(rsp)
}

func (c *ClientWithResponses) PostDocumentsUnstarWithResponse(ctx context.Context, body PostDocumentsUnstarJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsUnstarResponse, error) {
	rsp, err := c.PostDocumentsUnstar(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsUnstarResponse(rsp)
}

// PostDocumentsUpdateWithBodyWithResponse request with arbitrary body returning *PostDocumentsUpdateResponse
func (c *ClientWithResponses) PostDocumentsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsUpdateResponse, error) {
	rsp, err := c.PostDocumentsUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostDocumentsUpdateWithResponse(ctx context.Context, body PostDocumentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsUpdateResponse, error) {
	rsp, err := c.PostDocumentsUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsUpdateResponse(rsp)
}

// PostDocumentsUsersWithBodyWithResponse request with arbitrary body returning *PostDocumentsUsersResponse
func (c *ClientWithResponses) PostDocumentsUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsUsersResponse, error) {
	rsp, err := c.PostDocumentsUsersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsUsersResponse(rsp)
}

func (c *ClientWithResponses) PostDocumentsUsersWithResponse(ctx context.Context, body PostDocumentsUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsUsersResponse, error) {
	rsp, err := c.PostDocumentsUsers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsUsersResponse(rsp)
}

// PostDocumentsViewedWithBodyWithResponse request with arbitrary body returning *PostDocumentsViewedResponse
func (c *ClientWithResponses) PostDocumentsViewedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDocumentsViewedResponse, error) {
	rsp, err := c.PostDocumentsViewedWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsViewedResponse(rsp)
}

func (c *ClientWithResponses) PostDocumentsViewedWithResponse(ctx context.Context, body PostDocumentsViewedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDocumentsViewedResponse, error) {
	rsp, err := c.PostDocumentsViewed(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDocumentsViewedResponse(rsp)
}

// PostEventsListWithBodyWithResponse request with arbitrary body returning *PostEventsListResponse
func (c *ClientWithResponses) PostEventsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEventsListResponse, error) {
	rsp, err := c.PostEventsListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEventsListResponse(rsp)
}

func (c *ClientWithResponses) PostEventsListWithResponse(ctx context.Context, body PostEventsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEventsListResponse, error) {
	rsp, err := c.PostEventsList(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEventsListResponse(rsp)
}

// PostFileOperationsDeleteWithBodyWithResponse request with arbitrary body returning *PostFileOperationsDeleteResponse
func (c *ClientWithResponses) PostFileOperationsDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFileOperationsDeleteResponse, error) {
	rsp, err := c.PostFileOperationsDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFileOperationsDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostFileOperationsDeleteWithResponse(ctx context.Context, body PostFileOperationsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFileOperationsDeleteResponse, error) {
	rsp, err := c.PostFileOperationsDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFileOperationsDeleteResponse(rsp)
}

// PostFileOperationsInfoWithBodyWithResponse request with arbitrary body returning *PostFileOperationsInfoResponse
func (c *ClientWithResponses) PostFileOperationsInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFileOperationsInfoResponse, error) {
	rsp, err := c.PostFileOperationsInfoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFileOperationsInfoResponse(rsp)
}

func (c *ClientWithResponses) PostFileOperationsInfoWithResponse(ctx context.Context, body PostFileOperationsInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFileOperationsInfoResponse, error) {
	rsp, err := c.PostFileOperationsInfo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFileOperationsInfoResponse(rsp)
}

// PostFileOperationsListWithBodyWithResponse request with arbitrary body returning *PostFileOperationsListResponse
func (c *ClientWithResponses) PostFileOperationsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFileOperationsListResponse, error) {
	rsp, err := c.PostFileOperationsListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFileOperationsListResponse(rsp)
}

func (c *ClientWithResponses) PostFileOperationsListWithResponse(ctx context.Context, body PostFileOperationsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFileOperationsListResponse, error) {
	rsp, err := c.PostFileOperationsList(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFileOperationsListResponse(rsp)
}

// PostFileOperationsRedirectWithBodyWithResponse request with arbitrary body returning *PostFileOperationsRedirectResponse
func (c *ClientWithResponses) PostFileOperationsRedirectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFileOperationsRedirectResponse, error) {
	rsp, err := c.PostFileOperationsRedirectWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFileOperationsRedirectResponse(rsp)
}

func (c *ClientWithResponses) PostFileOperationsRedirectWithResponse(ctx context.Context, body PostFileOperationsRedirectJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFileOperationsRedirectResponse, error) {
	rsp, err := c.PostFileOperationsRedirect(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFileOperationsRedirectResponse(rsp)
}

// PostGroupsAddUserWithBodyWithResponse request with arbitrary body returning *PostGroupsAddUserResponse
func (c *ClientWithResponses) PostGroupsAddUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsAddUserResponse, error) {
	rsp, err := c.PostGroupsAddUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsAddUserResponse(rsp)
}

func (c *ClientWithResponses) PostGroupsAddUserWithResponse(ctx context.Context, body PostGroupsAddUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsAddUserResponse, error) {
	rsp, err := c.PostGroupsAddUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsAddUserResponse(rsp)
}

// PostGroupsCreateWithBodyWithResponse request with arbitrary body returning *PostGroupsCreateResponse
func (c *ClientWithResponses) PostGroupsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsCreateResponse, error) {
	rsp, err := c.PostGroupsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsCreateResponse(rsp)
}

func (c *ClientWithResponses) PostGroupsCreateWithResponse(ctx context.Context, body PostGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsCreateResponse, error) {
	rsp, err := c.PostGroupsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsCreateResponse(rsp)
}

// PostGroupsDeleteWithBodyWithResponse request with arbitrary body returning *PostGroupsDeleteResponse
func (c *ClientWithResponses) PostGroupsDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsDeleteResponse, error) {
	rsp, err := c.PostGroupsDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostGroupsDeleteWithResponse(ctx context.Context, body PostGroupsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsDeleteResponse, error) {
	rsp, err := c.PostGroupsDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsDeleteResponse(rsp)
}

// PostGroupsInfoWithBodyWithResponse request with arbitrary body returning *PostGroupsInfoResponse
func (c *ClientWithResponses) PostGroupsInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsInfoResponse, error) {
	rsp, err := c.PostGroupsInfoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsInfoResponse(rsp)
}

func (c *ClientWithResponses) PostGroupsInfoWithResponse(ctx context.Context, body PostGroupsInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsInfoResponse, error) {
	rsp, err := c.PostGroupsInfo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsInfoResponse(rsp)
}

// PostGroupsListWithBodyWithResponse request with arbitrary body returning *PostGroupsListResponse
func (c *ClientWithResponses) PostGroupsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsListResponse, error) {
	rsp, err := c.PostGroupsListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsListResponse(rsp)
}

func (c *ClientWithResponses) PostGroupsListWithResponse(ctx context.Context, body PostGroupsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsListResponse, error) {
	rsp, err := c.PostGroupsList(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsListResponse(rsp)
}

// PostGroupsMembershipsWithBodyWithResponse request with arbitrary body returning *PostGroupsMembershipsResponse
func (c *ClientWithResponses) PostGroupsMembershipsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsMembershipsResponse, error) {
	rsp, err := c.PostGroupsMembershipsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsMembershipsResponse(rsp)
}

func (c *ClientWithResponses) PostGroupsMembershipsWithResponse(ctx context.Context, body PostGroupsMembershipsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsMembershipsResponse, error) {
	rsp, err := c.PostGroupsMemberships(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsMembershipsResponse(rsp)
}

// PostGroupsRemoveUserWithBodyWithResponse request with arbitrary body returning *PostGroupsRemoveUserResponse
func (c *ClientWithResponses) PostGroupsRemoveUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsRemoveUserResponse, error) {
	rsp, err := c.PostGroupsRemoveUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsRemoveUserResponse(rsp)
}

func (c *ClientWithResponses) PostGroupsRemoveUserWithResponse(ctx context.Context, body PostGroupsRemoveUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsRemoveUserResponse, error) {
	rsp, err := c.PostGroupsRemoveUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsRemoveUserResponse(rsp)
}

// PostGroupsUpdateWithBodyWithResponse request with arbitrary body returning *PostGroupsUpdateResponse
func (c *ClientWithResponses) PostGroupsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsUpdateResponse, error) {
	rsp, err := c.PostGroupsUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostGroupsUpdateWithResponse(ctx context.Context, body PostGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsUpdateResponse, error) {
	rsp, err := c.PostGroupsUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsUpdateResponse(rsp)
}

// PostRevisionsInfoWithBodyWithResponse request with arbitrary body returning *PostRevisionsInfoResponse
func (c *ClientWithResponses) PostRevisionsInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRevisionsInfoResponse, error) {
	rsp, err := c.PostRevisionsInfoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRevisionsInfoResponse(rsp)
}

func (c *ClientWithResponses) PostRevisionsInfoWithResponse(ctx context.Context, body PostRevisionsInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRevisionsInfoResponse, error) {
	rsp, err := c.PostRevisionsInfo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRevisionsInfoResponse(rsp)
}

// PostRevisionsListWithBodyWithResponse request with arbitrary body returning *PostRevisionsListResponse
func (c *ClientWithResponses) PostRevisionsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRevisionsListResponse, error) {
	rsp, err := c.PostRevisionsListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRevisionsListResponse(rsp)
}

func (c *ClientWithResponses) PostRevisionsListWithResponse(ctx context.Context, body PostRevisionsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRevisionsListResponse, error) {
	rsp, err := c.PostRevisionsList(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRevisionsListResponse(rsp)
}

// PostSharesCreateWithBodyWithResponse request with arbitrary body returning *PostSharesCreateResponse
func (c *ClientWithResponses) PostSharesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSharesCreateResponse, error) {
	rsp, err := c.PostSharesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSharesCreateResponse(rsp)
}

func (c *ClientWithResponses) PostSharesCreateWithResponse(ctx context.Context, body PostSharesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSharesCreateResponse, error) {
	rsp, err := c.PostSharesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSharesCreateResponse(rsp)
}

// PostSharesInfoWithBodyWithResponse request with arbitrary body returning *PostSharesInfoResponse
func (c *ClientWithResponses) PostSharesInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSharesInfoResponse, error) {
	rsp, err := c.PostSharesInfoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSharesInfoResponse(rsp)
}

func (c *ClientWithResponses) PostSharesInfoWithResponse(ctx context.Context, body PostSharesInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSharesInfoResponse, error) {
	rsp, err := c.PostSharesInfo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSharesInfoResponse(rsp)
}

// PostSharesListWithBodyWithResponse request with arbitrary body returning *PostSharesListResponse
func (c *ClientWithResponses) PostSharesListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSharesListResponse, error) {
	rsp, err := c.PostSharesListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSharesListResponse(rsp)
}

func (c *ClientWithResponses) PostSharesListWithResponse(ctx context.Context, body PostSharesListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSharesListResponse, error) {
	rsp, err := c.PostSharesList(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSharesListResponse(rsp)
}

// PostSharesRevokeWithBodyWithResponse request with arbitrary body returning *PostSharesRevokeResponse
func (c *ClientWithResponses) PostSharesRevokeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSharesRevokeResponse, error) {
	rsp, err := c.PostSharesRevokeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSharesRevokeResponse(rsp)
}

func (c *ClientWithResponses) PostSharesRevokeWithResponse(ctx context.Context, body PostSharesRevokeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSharesRevokeResponse, error) {
	rsp, err := c.PostSharesRevoke(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSharesRevokeResponse(rsp)
}

// PostSharesUpdateWithBodyWithResponse request with arbitrary body returning *PostSharesUpdateResponse
func (c *ClientWithResponses) PostSharesUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSharesUpdateResponse, error) {
	rsp, err := c.PostSharesUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSharesUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostSharesUpdateWithResponse(ctx context.Context, body PostSharesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSharesUpdateResponse, error) {
	rsp, err := c.PostSharesUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSharesUpdateResponse(rsp)
}

// PostUsersActivateWithBodyWithResponse request with arbitrary body returning *PostUsersActivateResponse
func (c *ClientWithResponses) PostUsersActivateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersActivateResponse, error) {
	rsp, err := c.PostUsersActivateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersActivateResponse(rsp)
}

func (c *ClientWithResponses) PostUsersActivateWithResponse(ctx context.Context, body PostUsersActivateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersActivateResponse, error) {
	rsp, err := c.PostUsersActivate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersActivateResponse(rsp)
}

// PostUsersDeleteWithBodyWithResponse request with arbitrary body returning *PostUsersDeleteResponse
func (c *ClientWithResponses) PostUsersDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersDeleteResponse, error) {
	rsp, err := c.PostUsersDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostUsersDeleteWithResponse(ctx context.Context, body PostUsersDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersDeleteResponse, error) {
	rsp, err := c.PostUsersDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersDeleteResponse(rsp)
}

// PostUsersInfoWithBodyWithResponse request with arbitrary body returning *PostUsersInfoResponse
func (c *ClientWithResponses) PostUsersInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersInfoResponse, error) {
	rsp, err := c.PostUsersInfoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersInfoResponse(rsp)
}

func (c *ClientWithResponses) PostUsersInfoWithResponse(ctx context.Context, body PostUsersInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersInfoResponse, error) {
	rsp, err := c.PostUsersInfo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersInfoResponse(rsp)
}

// PostUsersInviteWithBodyWithResponse request with arbitrary body returning *PostUsersInviteResponse
func (c *ClientWithResponses) PostUsersInviteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersInviteResponse, error) {
	rsp, err := c.PostUsersInviteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersInviteResponse(rsp)
}

func (c *ClientWithResponses) PostUsersInviteWithResponse(ctx context.Context, body PostUsersInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersInviteResponse, error) {
	rsp, err := c.PostUsersInvite(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersInviteResponse(rsp)
}

// PostUsersListWithBodyWithResponse request with arbitrary body returning *PostUsersListResponse
func (c *ClientWithResponses) PostUsersListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersListResponse, error) {
	rsp, err := c.PostUsersListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersListResponse(rsp)
}

func (c *ClientWithResponses) PostUsersListWithResponse(ctx context.Context, body PostUsersListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersListResponse, error) {
	rsp, err := c.PostUsersList(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersListResponse(rsp)
}

// PostUsersSuspendWithBodyWithResponse request with arbitrary body returning *PostUsersSuspendResponse
func (c *ClientWithResponses) PostUsersSuspendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersSuspendResponse, error) {
	rsp, err := c.PostUsersSuspendWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersSuspendResponse(rsp)
}

func (c *ClientWithResponses) PostUsersSuspendWithResponse(ctx context.Context, body PostUsersSuspendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersSuspendResponse, error) {
	rsp, err := c.PostUsersSuspend(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersSuspendResponse(rsp)
}

// PostUsersUpdateWithBodyWithResponse request with arbitrary body returning *PostUsersUpdateResponse
func (c *ClientWithResponses) PostUsersUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersUpdateResponse, error) {
	rsp, err := c.PostUsersUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostUsersUpdateWithResponse(ctx context.Context, body PostUsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersUpdateResponse, error) {
	rsp, err := c.PostUsersUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersUpdateResponse(rsp)
}

// PostUsersUpdateRoleWithBodyWithResponse request with arbitrary body returning *PostUsersUpdateRoleResponse
func (c *ClientWithResponses) PostUsersUpdateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersUpdateRoleResponse, error) {
	rsp, err := c.PostUsersUpdateRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersUpdateRoleResponse(rsp)
}

func (c *ClientWithResponses) PostUsersUpdateRoleWithResponse(ctx context.Context, body PostUsersUpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersUpdateRoleResponse, error) {
	rsp, err := c.PostUsersUpdateRole(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersUpdateRoleResponse(rsp)
}

// PostViewsCreateWithBodyWithResponse request with arbitrary body returning *PostViewsCreateResponse
func (c *ClientWithResponses) PostViewsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostViewsCreateResponse, error) {
	rsp, err := c.PostViewsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostViewsCreateResponse(rsp)
}

func (c *ClientWithResponses) PostViewsCreateWithResponse(ctx context.Context, body PostViewsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostViewsCreateResponse, error) {
	rsp, err := c.PostViewsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostViewsCreateResponse(rsp)
}

// PostViewsListWithBodyWithResponse request with arbitrary body returning *PostViewsListResponse
func (c *ClientWithResponses) PostViewsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostViewsListResponse, error) {
	rsp, err := c.PostViewsListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostViewsListResponse(rsp)
}

func (c *ClientWithResponses) PostViewsListWithResponse(ctx context.Context, body PostViewsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostViewsListResponse, error) {
	rsp, err := c.PostViewsList(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostViewsListResponse(rsp)
}

// ParsePostAttachmentsCreateResponse parses an HTTP response from a PostAttachmentsCreateWithResponse call
func ParsePostAttachmentsCreateResponse(rsp *http.Response) (*PostAttachmentsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAttachmentsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Attachment    *Attachment             `json:"attachment,omitempty"`
				Form          *map[string]interface{} `json:"form,omitempty"`
				MaxUploadSize *float32                `json:"maxUploadSize,omitempty"`
				UploadUrl     *string                 `json:"uploadUrl,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostAttachmentsDeleteResponse parses an HTTP response from a PostAttachmentsDeleteWithResponse call
func ParsePostAttachmentsDeleteResponse(rsp *http.Response) (*PostAttachmentsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAttachmentsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostAttachmentsRedirectResponse parses an HTTP response from a PostAttachmentsRedirectWithResponse call
func ParsePostAttachmentsRedirectResponse(rsp *http.Response) (*PostAttachmentsRedirectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAttachmentsRedirectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAuthConfigResponse parses an HTTP response from a PostAuthConfigWithResponse call
func ParsePostAuthConfigResponse(rsp *http.Response) (*PostAuthConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Hostname *string `json:"hostname,omitempty"`
				Name     *string `json:"name,omitempty"`
				Services *[]struct {
					AuthUrl *string `json:"authUrl,omitempty"`
					Id      *string `json:"id,omitempty"`
					Name    *string `json:"name,omitempty"`
				} `json:"services,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAuthInfoResponse parses an HTTP response from a PostAuthInfoWithResponse call
func ParsePostAuthInfoResponse(rsp *http.Response) (*PostAuthInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *Auth `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostCollectionsAddGroupResponse parses an HTTP response from a PostCollectionsAddGroupWithResponse call
func ParsePostCollectionsAddGroupResponse(rsp *http.Response) (*PostCollectionsAddGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCollectionsAddGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				CollectionGroupMemberships *[]CollectionGroupMembership `json:"collectionGroupMemberships,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostCollectionsAddUserResponse parses an HTTP response from a PostCollectionsAddUserWithResponse call
func ParsePostCollectionsAddUserResponse(rsp *http.Response) (*PostCollectionsAddUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCollectionsAddUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Memberships *[]Membership `json:"memberships,omitempty"`
				Users       *[]User       `json:"users,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostCollectionsCreateResponse parses an HTTP response from a PostCollectionsCreateWithResponse call
func ParsePostCollectionsCreateResponse(rsp *http.Response) (*PostCollectionsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCollectionsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     *Collection `json:"data,omitempty"`
			Policies *[]Policy   `json:"policies,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostCollectionsDeleteResponse parses an HTTP response from a PostCollectionsDeleteWithResponse call
func ParsePostCollectionsDeleteResponse(rsp *http.Response) (*PostCollectionsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCollectionsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostCollectionsDocumentsResponse parses an HTTP response from a PostCollectionsDocumentsWithResponse call
func ParsePostCollectionsDocumentsResponse(rsp *http.Response) (*PostCollectionsDocumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCollectionsDocumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]NavigationNode `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostCollectionsExportResponse parses an HTTP response from a PostCollectionsExportWithResponse call
func ParsePostCollectionsExportResponse(rsp *http.Response) (*PostCollectionsExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCollectionsExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				FileOperation *FileOperation `json:"fileOperation,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostCollectionsExportAllResponse parses an HTTP response from a PostCollectionsExportAllWithResponse call
func ParsePostCollectionsExportAllResponse(rsp *http.Response) (*PostCollectionsExportAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCollectionsExportAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				FileOperation *FileOperation `json:"fileOperation,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostCollectionsGroupMembershipsResponse parses an HTTP response from a PostCollectionsGroupMembershipsWithResponse call
func ParsePostCollectionsGroupMembershipsResponse(rsp *http.Response) (*PostCollectionsGroupMembershipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCollectionsGroupMembershipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				CollectionGroupMemberships *[]CollectionGroupMembership `json:"collectionGroupMemberships,omitempty"`
				Groups                     *[]Group                     `json:"groups,omitempty"`
			} `json:"data,omitempty"`
			Pagination *Pagination `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostCollectionsInfoResponse parses an HTTP response from a PostCollectionsInfoWithResponse call
func ParsePostCollectionsInfoResponse(rsp *http.Response) (*PostCollectionsInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCollectionsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *Collection `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostCollectionsListResponse parses an HTTP response from a PostCollectionsListWithResponse call
func ParsePostCollectionsListResponse(rsp *http.Response) (*PostCollectionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCollectionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Collection `json:"data,omitempty"`
			Pagination *Pagination   `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostCollectionsMembershipsResponse parses an HTTP response from a PostCollectionsMembershipsWithResponse call
func ParsePostCollectionsMembershipsResponse(rsp *http.Response) (*PostCollectionsMembershipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCollectionsMembershipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Memberships *[]Membership `json:"memberships,omitempty"`
				Users       *[]User       `json:"users,omitempty"`
			} `json:"data,omitempty"`
			Pagination *Pagination `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostCollectionsRemoveGroupResponse parses an HTTP response from a PostCollectionsRemoveGroupWithResponse call
func ParsePostCollectionsRemoveGroupResponse(rsp *http.Response) (*PostCollectionsRemoveGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCollectionsRemoveGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostCollectionsRemoveUserResponse parses an HTTP response from a PostCollectionsRemoveUserWithResponse call
func ParsePostCollectionsRemoveUserResponse(rsp *http.Response) (*PostCollectionsRemoveUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCollectionsRemoveUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostCollectionsUpdateResponse parses an HTTP response from a PostCollectionsUpdateWithResponse call
func ParsePostCollectionsUpdateResponse(rsp *http.Response) (*PostCollectionsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCollectionsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     *Collection `json:"data,omitempty"`
			Policies *[]Policy   `json:"policies,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostCommentsCreateResponse parses an HTTP response from a PostCommentsCreateWithResponse call
func ParsePostCommentsCreateResponse(rsp *http.Response) (*PostCommentsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCommentsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *Comment `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostCommentsDeleteResponse parses an HTTP response from a PostCommentsDeleteWithResponse call
func ParsePostCommentsDeleteResponse(rsp *http.Response) (*PostCommentsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCommentsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostCommentsListResponse parses an HTTP response from a PostCommentsListWithResponse call
func ParsePostCommentsListResponse(rsp *http.Response) (*PostCommentsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCommentsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Document `json:"data,omitempty"`
			Pagination *Pagination `json:"pagination,omitempty"`
			Policies   *[]Policy   `json:"policies,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostCommentsUpdateResponse parses an HTTP response from a PostCommentsUpdateWithResponse call
func ParsePostCommentsUpdateResponse(rsp *http.Response) (*PostCommentsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCommentsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *Comment `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostDocumentsAddUserResponse parses an HTTP response from a PostDocumentsAddUserWithResponse call
func ParsePostDocumentsAddUserResponse(rsp *http.Response) (*PostDocumentsAddUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDocumentsAddUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Memberships *[]Membership `json:"memberships,omitempty"`
				Users       *[]User       `json:"users,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDocumentsArchiveResponse parses an HTTP response from a PostDocumentsArchiveWithResponse call
func ParsePostDocumentsArchiveResponse(rsp *http.Response) (*PostDocumentsArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDocumentsArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     *Document `json:"data,omitempty"`
			Policies *[]Policy `json:"policies,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostDocumentsCreateResponse parses an HTTP response from a PostDocumentsCreateWithResponse call
func ParsePostDocumentsCreateResponse(rsp *http.Response) (*PostDocumentsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDocumentsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     *Document `json:"data,omitempty"`
			Policies *[]Policy `json:"policies,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostDocumentsDeleteResponse parses an HTTP response from a PostDocumentsDeleteWithResponse call
func ParsePostDocumentsDeleteResponse(rsp *http.Response) (*PostDocumentsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDocumentsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostDocumentsDraftsResponse parses an HTTP response from a PostDocumentsDraftsWithResponse call
func ParsePostDocumentsDraftsResponse(rsp *http.Response) (*PostDocumentsDraftsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDocumentsDraftsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Document `json:"data,omitempty"`
			Pagination *Pagination `json:"pagination,omitempty"`
			Policies   *[]Policy   `json:"policies,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostDocumentsExportResponse parses an HTTP response from a PostDocumentsExportWithResponse call
func ParsePostDocumentsExportResponse(rsp *http.Response) (*PostDocumentsExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDocumentsExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data The document content in Markdown formatting
			Data *string `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostDocumentsImportResponse parses an HTTP response from a PostDocumentsImportWithResponse call
func ParsePostDocumentsImportResponse(rsp *http.Response) (*PostDocumentsImportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDocumentsImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *Document `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostDocumentsInfoResponse parses an HTTP response from a PostDocumentsInfoWithResponse call
func ParsePostDocumentsInfoResponse(rsp *http.Response) (*PostDocumentsInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDocumentsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *Document `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostDocumentsListResponse parses an HTTP response from a PostDocumentsListWithResponse call
func ParsePostDocumentsListResponse(rsp *http.Response) (*PostDocumentsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDocumentsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Document `json:"data,omitempty"`
			Pagination *Pagination `json:"pagination,omitempty"`
			Policies   *[]Policy   `json:"policies,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostDocumentsMembershipsResponse parses an HTTP response from a PostDocumentsMembershipsWithResponse call
func ParsePostDocumentsMembershipsResponse(rsp *http.Response) (*PostDocumentsMembershipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDocumentsMembershipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Memberships *[]Membership `json:"memberships,omitempty"`
				Users       *[]User       `json:"users,omitempty"`
			} `json:"data,omitempty"`
			Pagination *Pagination `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostDocumentsMoveResponse parses an HTTP response from a PostDocumentsMoveWithResponse call
func ParsePostDocumentsMoveResponse(rsp *http.Response) (*PostDocumentsMoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDocumentsMoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Collections *[]Collection `json:"collections,omitempty"`
				Documents   *[]Document   `json:"documents,omitempty"`
			} `json:"data,omitempty"`
			Policies *[]Policy `json:"policies,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostDocumentsRemoveUserResponse parses an HTTP response from a PostDocumentsRemoveUserWithResponse call
func ParsePostDocumentsRemoveUserResponse(rsp *http.Response) (*PostDocumentsRemoveUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDocumentsRemoveUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostDocumentsRestoreResponse parses an HTTP response from a PostDocumentsRestoreWithResponse call
func ParsePostDocumentsRestoreResponse(rsp *http.Response) (*PostDocumentsRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDocumentsRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     *Document `json:"data,omitempty"`
			Policies *[]Policy `json:"policies,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostDocumentsSearchResponse parses an HTTP response from a PostDocumentsSearchWithResponse call
func ParsePostDocumentsSearchResponse(rsp *http.Response) (*PostDocumentsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDocumentsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]struct {
				// Context A short snippet of context from the document that includes the search query.
				Context  *string   `json:"context,omitempty"`
				Document *Document `json:"document,omitempty"`

				// Ranking The ranking used to order search results based on relevance.
				Ranking *float32 `json:"ranking,omitempty"`
			} `json:"data,omitempty"`
			Pagination *Pagination `json:"pagination,omitempty"`
			Policies   *[]Policy   `json:"policies,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostDocumentsStarResponse parses an HTTP response from a PostDocumentsStarWithResponse call
func ParsePostDocumentsStarResponse(rsp *http.Response) (*PostDocumentsStarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDocumentsStarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostDocumentsTemplatizeResponse parses an HTTP response from a PostDocumentsTemplatizeWithResponse call
func ParsePostDocumentsTemplatizeResponse(rsp *http.Response) (*PostDocumentsTemplatizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDocumentsTemplatizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     *Document `json:"data,omitempty"`
			Policies *[]Policy `json:"policies,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostDocumentsUnpublishResponse parses an HTTP response from a PostDocumentsUnpublishWithResponse call
func ParsePostDocumentsUnpublishResponse(rsp *http.Response) (*PostDocumentsUnpublishResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDocumentsUnpublishResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     *Document `json:"data,omitempty"`
			Policies *[]Policy `json:"policies,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostDocumentsUnstarResponse parses an HTTP response from a PostDocumentsUnstarWithResponse call
func ParsePostDocumentsUnstarResponse(rsp *http.Response) (*PostDocumentsUnstarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDocumentsUnstarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostDocumentsUpdateResponse parses an HTTP response from a PostDocumentsUpdateWithResponse call
func ParsePostDocumentsUpdateResponse(rsp *http.Response) (*PostDocumentsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDocumentsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     *Document `json:"data,omitempty"`
			Policies *[]Policy `json:"policies,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostDocumentsUsersResponse parses an HTTP response from a PostDocumentsUsersWithResponse call
func ParsePostDocumentsUsersResponse(rsp *http.Response) (*PostDocumentsUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDocumentsUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]User     `json:"data,omitempty"`
			Pagination *Pagination `json:"pagination,omitempty"`
			Policies   *[]Policy   `json:"policies,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostDocumentsViewedResponse parses an HTTP response from a PostDocumentsViewedWithResponse call
func ParsePostDocumentsViewedResponse(rsp *http.Response) (*PostDocumentsViewedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDocumentsViewedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Document `json:"data,omitempty"`
			Pagination *Pagination `json:"pagination,omitempty"`
			Policies   *[]Policy   `json:"policies,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostEventsListResponse parses an HTTP response from a PostEventsListWithResponse call
func ParsePostEventsListResponse(rsp *http.Response) (*PostEventsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEventsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Event    `json:"data,omitempty"`
			Pagination *Pagination `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostFileOperationsDeleteResponse parses an HTTP response from a PostFileOperationsDeleteWithResponse call
func ParsePostFileOperationsDeleteResponse(rsp *http.Response) (*PostFileOperationsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFileOperationsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostFileOperationsInfoResponse parses an HTTP response from a PostFileOperationsInfoWithResponse call
func ParsePostFileOperationsInfoResponse(rsp *http.Response) (*PostFileOperationsInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFileOperationsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *FileOperation `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostFileOperationsListResponse parses an HTTP response from a PostFileOperationsListWithResponse call
func ParsePostFileOperationsListResponse(rsp *http.Response) (*PostFileOperationsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFileOperationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]FileOperation `json:"data,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostFileOperationsRedirectResponse parses an HTTP response from a PostFileOperationsRedirectWithResponse call
func ParsePostFileOperationsRedirectResponse(rsp *http.Response) (*PostFileOperationsRedirectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFileOperationsRedirectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostGroupsAddUserResponse parses an HTTP response from a PostGroupsAddUserWithResponse call
func ParsePostGroupsAddUserResponse(rsp *http.Response) (*PostGroupsAddUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGroupsAddUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				GroupMemberships *[]Membership `json:"groupMemberships,omitempty"`
				Groups           *[]Group      `json:"groups,omitempty"`
				Users            *[]User       `json:"users,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostGroupsCreateResponse parses an HTTP response from a PostGroupsCreateWithResponse call
func ParsePostGroupsCreateResponse(rsp *http.Response) (*PostGroupsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGroupsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     *Group    `json:"data,omitempty"`
			Policies *[]Policy `json:"policies,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostGroupsDeleteResponse parses an HTTP response from a PostGroupsDeleteWithResponse call
func ParsePostGroupsDeleteResponse(rsp *http.Response) (*PostGroupsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGroupsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostGroupsInfoResponse parses an HTTP response from a PostGroupsInfoWithResponse call
func ParsePostGroupsInfoResponse(rsp *http.Response) (*PostGroupsInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGroupsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *Group `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostGroupsListResponse parses an HTTP response from a PostGroupsListWithResponse call
func ParsePostGroupsListResponse(rsp *http.Response) (*PostGroupsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGroupsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				// GroupMemberships A preview of memberships in the group, note that this is not all memberships which can be queried from `groups.memberships`.
				GroupMemberships *[]GroupMembership `json:"groupMemberships,omitempty"`
				Groups           *[]Group           `json:"groups,omitempty"`
			} `json:"data,omitempty"`
			Pagination *Pagination `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostGroupsMembershipsResponse parses an HTTP response from a PostGroupsMembershipsWithResponse call
func ParsePostGroupsMembershipsResponse(rsp *http.Response) (*PostGroupsMembershipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGroupsMembershipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				GroupMemberships *[]GroupMembership `json:"groupMemberships,omitempty"`
				Users            *[]User            `json:"users,omitempty"`
			} `json:"data,omitempty"`
			Pagination *Pagination `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostGroupsRemoveUserResponse parses an HTTP response from a PostGroupsRemoveUserWithResponse call
func ParsePostGroupsRemoveUserResponse(rsp *http.Response) (*PostGroupsRemoveUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGroupsRemoveUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Groups *[]Group `json:"groups,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostGroupsUpdateResponse parses an HTTP response from a PostGroupsUpdateWithResponse call
func ParsePostGroupsUpdateResponse(rsp *http.Response) (*PostGroupsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGroupsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     *Group    `json:"data,omitempty"`
			Policies *[]Policy `json:"policies,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRevisionsInfoResponse parses an HTTP response from a PostRevisionsInfoWithResponse call
func ParsePostRevisionsInfoResponse(rsp *http.Response) (*PostRevisionsInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRevisionsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *Revision `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRevisionsListResponse parses an HTTP response from a PostRevisionsListWithResponse call
func ParsePostRevisionsListResponse(rsp *http.Response) (*PostRevisionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRevisionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Revision `json:"data,omitempty"`
			Pagination *Pagination `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostSharesCreateResponse parses an HTTP response from a PostSharesCreateWithResponse call
func ParsePostSharesCreateResponse(rsp *http.Response) (*PostSharesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSharesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *Share `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostSharesInfoResponse parses an HTTP response from a PostSharesInfoWithResponse call
func ParsePostSharesInfoResponse(rsp *http.Response) (*PostSharesInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSharesInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *Share `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostSharesListResponse parses an HTTP response from a PostSharesListWithResponse call
func ParsePostSharesListResponse(rsp *http.Response) (*PostSharesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSharesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Share    `json:"data,omitempty"`
			Pagination *Pagination `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostSharesRevokeResponse parses an HTTP response from a PostSharesRevokeWithResponse call
func ParsePostSharesRevokeResponse(rsp *http.Response) (*PostSharesRevokeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSharesRevokeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostSharesUpdateResponse parses an HTTP response from a PostSharesUpdateWithResponse call
func ParsePostSharesUpdateResponse(rsp *http.Response) (*PostSharesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSharesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *Share `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Validation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostUsersActivateResponse parses an HTTP response from a PostUsersActivateWithResponse call
func ParsePostUsersActivateResponse(rsp *http.Response) (*PostUsersActivateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersActivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *User `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostUsersDeleteResponse parses an HTTP response from a PostUsersDeleteWithResponse call
func ParsePostUsersDeleteResponse(rsp *http.Response) (*PostUsersDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostUsersInfoResponse parses an HTTP response from a PostUsersInfoWithResponse call
func ParsePostUsersInfoResponse(rsp *http.Response) (*PostUsersInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *User `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostUsersInviteResponse parses an HTTP response from a PostUsersInviteWithResponse call
func ParsePostUsersInviteResponse(rsp *http.Response) (*PostUsersInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Sent  *[]Invite `json:"sent,omitempty"`
			Users *[]User   `json:"users,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostUsersListResponse parses an HTTP response from a PostUsersListWithResponse call
func ParsePostUsersListResponse(rsp *http.Response) (*PostUsersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]User     `json:"data,omitempty"`
			Pagination *Pagination `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostUsersSuspendResponse parses an HTTP response from a PostUsersSuspendWithResponse call
func ParsePostUsersSuspendResponse(rsp *http.Response) (*PostUsersSuspendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersSuspendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *User `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostUsersUpdateResponse parses an HTTP response from a PostUsersUpdateWithResponse call
func ParsePostUsersUpdateResponse(rsp *http.Response) (*PostUsersUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *User `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostUsersUpdateRoleResponse parses an HTTP response from a PostUsersUpdateRoleWithResponse call
func ParsePostUsersUpdateRoleResponse(rsp *http.Response) (*PostUsersUpdateRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersUpdateRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *User `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostViewsCreateResponse parses an HTTP response from a PostViewsCreateWithResponse call
func ParsePostViewsCreateResponse(rsp *http.Response) (*PostViewsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostViewsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *View `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostViewsListResponse parses an HTTP response from a PostViewsListWithResponse call
func ParsePostViewsListResponse(rsp *http.Response) (*PostViewsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostViewsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]View `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}
